///////////////////////////////////////////////////////////////////
//
// Служебный класс генерации документации в формате html
//
///////////////////////////////////////////////////////////////////

Перем Шаблоны;

Перем КаталогПубликацииДокументации;
Перем АнализироватьТолькоПотомковПодсистемы;

///////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////

#Область ГенерацияДанных

Функция ДокументацияПоМодулю(ДанныеМодуля, Ошибки) Экспорт

	ЧастиТекста = Новый Массив;
	ТекущаяОбласть = "";
	ОбластьОткрыта = Ложь;

	Для Каждого ОписаниеМетода Из ДанныеМодуля.Методы Цикл

		Если ОписаниеМетода.ИмяРаздела = ТипОбласти.РазделПрограммныйИнтерфейс Тогда

			Если ТекущаяОбласть <> ОписаниеМетода.ИмяОбласти И ОбластьОткрыта Тогда

				ЧастиТекста.Добавить(Шаблоны.ШаблонСплиттерКонец);
				ОбластьОткрыта = Ложь;
				ТекущаяОбласть = "";

			КонецЕсли;

			Если ЗначениеЗаполнено(ОписаниеМетода.ИмяОбласти) И НЕ ОбластьОткрыта Тогда

				ОбластьОткрыта = Истина;
				ТекущаяОбласть = ОписаниеМетода.ИмяОбласти;
				ЧастиТекста.Добавить(СтрШаблон(Шаблоны.ШаблонСплиттерНачало, ОписаниеМетода.ИмяОбласти));

			КонецЕсли;

			ЧастиТекста.Добавить(СтрШаблон(Шаблоны.ШаблонЗаголовок, ОписаниеМетода.ИмяМетода));

			ЧастиТекста.Добавить(СтрШаблон(Шаблоны.ШаблонОписание, ОбработатьСтроку(ОписаниеМетода.Описание)));

			Если ОписаниеМетода.ПараметрыМетода.Количество() Тогда

				ЧастиТекста.Добавить(Шаблоны.ШаблонШапкаТЧ);

				Ит = 0;
				Для Каждого Параметр Из ОписаниеМетода.ПараметрыМетода Цикл

					Ит = Ит + 1;
					ЧастиТекста.Добавить(СтрШаблон(Шаблоны.ШаблонСтрокаТЧ, 
						Ит, 
						Параметр.Имя, 
						?(ЗначениеЗаполнено(Параметр.ЗначениеПоУмолчанию), "Нет", "Да"), 
						Параметр.ТипПараметра, 
						ОбработатьСтроку(Параметр.ОписаниеПараметра)));

				КонецЦикла;

				ЧастиТекста.Добавить(Шаблоны.ШаблонПодвалТЧ);

			КонецЕсли;

			Если ОписаниеМетода.ТипБлока = ТипыБлоковМодуля.ЗаголовокФункции Тогда
				
				ЧастиТекста.Добавить(СтрШаблон(Шаблоны.ШаблонВозврат, 
					ОписаниеМетода.ТипВозвращаемогоЗначения, 
					ОбработатьСтроку(ОписаниеМетода.ОписаниеВозвращаемогоЗначения)));

			КонецЕсли;

			Для Каждого Пример Из ОписаниеМетода.Примеры Цикл

				ЧастиТекста.Добавить(СтрШаблон(Шаблоны.ШаблонПример, ОбработатьСтроку(Пример, Истина)));

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если ОбластьОткрыта Тогда

		ЧастиТекста.Добавить(Шаблоны.ШаблонСплиттерКонец);

	КонецЕсли;

	Если ЧастиТекста.Количество() Тогда
		
		ЧастиТекста.Вставить(0, Шаблоны.ШаблонНачалоСтраницы);
		ЧастиТекста.Добавить(Шаблоны.ШаблонКонецСтраницы);

	КонецЕсли;

	Возврат СтрСоединить(ЧастиТекста);
	
КонецФункции

Функция ДокументацияКонстанты(МассивКонстант, Ошибки) Экспорт

	СтрокиОписания = Новый Массив;
	
	Иерархия = ПомощникГенерацииДокументации.СобратьИерархиюПоПодсистемам(МассивКонстант, Ошибки);

	Для Каждого ДанныеРаздела Из Иерархия Цикл
		
		СтрокиОписания.Добавить(СтрШаблон(Шаблоны.ШаблонСплиттерНачало, ДанныеРаздела.Ключ));

		Для Каждого ДанныеПодсистемы Из ДанныеРаздела.Значение Цикл
			
			СтрокиОписания.Добавить(СтрШаблон(Шаблоны.ШаблонЗаголовокДляКонстант, ДанныеПодсистемы.Ключ));
			СтрокиОписания.Добавить(Шаблоны.ШаблонШапкаТЧДляКонстант);

			Для Каждого Константа Из ДанныеПодсистемы.Значение Цикл
				
				СтрокиОписания.Добавить(СтрШаблон(Шаблоны.ШаблонСтрокаТЧДляКонстант, 
											Константа.Имя, 
											Константа.Тип, 
											ОбработатьСтроку(Константа.Описание)));
				
			КонецЦикла;
			
			СтрокиОписания.Добавить(Шаблоны.ШаблонПодвалТЧ);
			
		КонецЦикла;

		СтрокиОписания.Добавить(Шаблоны.ШаблонСплиттерКонец);
		
	КонецЦикла;

	Если СтрокиОписания.Количество() Тогда
		
		СтрокиОписания.Вставить(0, Шаблоны.ШаблонНачалоСтраницы);
		СтрокиОписания.Добавить(Шаблоны.ШаблонКонецСтраницы);

	КонецЕсли;

	Возврат СтрСоединить(СтрокиОписания);
	
КонецФункции

#КонецОбласти

#Область Публикация

Функция ОпубликоватьРаздел(Раздел, ОбъектыРаздела, ОшибкиПубликации) Экспорт
	
	Если НЕ ПомощникГенерацииДокументации.ПроверкаВозможностиПубликацииВКаталог(КаталогПубликацииДокументации, Раздел, ОшибкиПубликации) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Успешно = Истина;
	
	Каталог = ПомощникГенерацииДокументации.СоздатьКаталогРаздела(КаталогПубликацииДокументации, Раздел);

	Для Каждого НоваяСтраница Из ОбъектыРаздела Цикл

		Попытка
			
			ПутьКСтранице = ОбъединитьПути(Каталог, НоваяСтраница.Имя) + ".html";
			ОбщегоНазначения.ЗаписатьФайл(ПутьКСтранице, СокрЛП(НоваяСтраница.Содержимое));

		Исключение

			ОшибкиПубликации.Добавить("Ошибка создания страницы '" + НоваяСтраница.Имя + "': " + ОписаниеОшибки());
			Успешно = Ложь;

		КонецПопытки;
		
	КонецЦикла;

	Возврат Успешно;

КонецФункции

Функция ОпубликоватьКонстанты(СодержимоеКонстанты) Экспорт

	Попытка

		ПутьКСтранице = ОбъединитьПути(КаталогПубликацииДокументации, "Константы") + ".html";
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.УстановитьТекст(СокрЛП(СодержимоеКонстанты));
		ТекстовыйДокумент.Записать(ПутьКСтранице);

	Исключение

		Возврат "Ошибка создания страницы 'Константы': " + ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область Настройки

// Производит чтение настроект из конфигурационного файла и сохраяет их в свойствах объекта
//
// Параметры:
//	 НастройкиСтенда - Объект.НастройкиСтенда - Объект, содержащий информацию конфигурационного файла
//
// Возвращаемое значение:
//	Строка - описание возникших ошибок
Функция ПрочитатьНастройки(НастройкиСтенда) Экспорт

	ТекстОшибки = "";

	НастройкиHTML = НастройкиСтенда.Настройка("AutodocGen\НастройкиHTML");
	Если ЗначениеЗаполнено(НастройкиHTML) Тогда

		Шаблоны = ПомощникГенерацииДокументации.ЗагрузитьШаблоны(НастройкиHTML["ПутьКШаблонам"], "Шаблоны_HTML.json");
		КаталогПубликацииДокументации = НастройкиHTML["КаталогПубликации"];
		АнализироватьТолькоПотомковПодсистемы = Строка(НастройкиHTML["АнализироватьТолькоПотомковПодсистемы"]);

		Если НЕ ЗначениеЗаполнено(КаталогПубликацииДокументации) Тогда

			ТекстОшибки = "Некорректные настройки каталога публикации";

		КонецЕсли;

	Иначе

		ТекстОшибки = "Отсутствуют настройки";

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

#КонецОбласти

#Область Служебные

Функция ОбработатьСтроку(Знач ВходнаяСтрока, ДляCDATA = Ложь)
	
	СимволыЗамены = Новый СписокЗначений;
	СимволыЗамены.Добавить("\", "\\");
	СимволыЗамены.Добавить("&", "&amp;");
	СимволыЗамены.Добавить("<", "&lt;");
	СимволыЗамены.Добавить(">", "&gt;");
	СимволыЗамены.Добавить(Символ(8211), "&ndash;");
	СимволыЗамены.Добавить(Символ(8212), "&mdash;");
	СимволыЗамены.Добавить(Символы.ПС, "<br/>");
	СимволыЗамены.Добавить(Символ(13), "<br/>");
	СимволыЗамены.Добавить(Символы.Таб, "    ");
	
	Если ДляCDATA Тогда
		
		СимволыЗамены.Добавить("""", "\""");
		
	Иначе
		
		СимволыЗамены.Добавить("""", "&quot;");
		
	КонецЕсли;
	
	Для Каждого СимволЗамены Из СимволыЗамены Цикл
		
		ВходнаяСтрока = СтрЗаменить(ВходнаяСтрока, СимволЗамены.Значение, СимволЗамены.Представление);
		
	КонецЦикла;
	
	Возврат ВходнаяСтрока; 
	
КонецФункции

#КонецОбласти
