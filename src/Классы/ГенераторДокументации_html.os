///////////////////////////////////////////////////////////////////////////////
//
// Служебный класс генерации документации в формате html
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////////////////

Перем Шаблоны;

Перем КаталогПубликацииДокументации;
Перем АнализироватьТолькоПотомковПодсистемы;

Перем СимволыЗамены;

///////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////

#Область ГенерацияДанных

// ДокументацияПоМодулю
//
// Параметры:
//   ДанныеМодуля - Структура - Описание модуля, структура содержащая массив описаний методов, см. ГенераторДокументации.ОписаниеМетода
//   Ошибки - Массив - Коллекция ошибок генерации документации, сюда помещаем инфу об возникших ошибках
//
//  Возвращаемое значение:
//   Строка - Текст документации по модулю, если пустая строка, публикация не выполняется
//
Функция ДокументацияПоМодулю(ДанныеМодуля, Ошибки) Экспорт
	
	Текст = ПомощникГенерацииДокументации.СформироватьОписаниеМодуляПоШаблонам(ДанныеМодуля, Шаблоны, СимволыЗамены);
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		Текст = Шаблоны.ШаблонНачалоСтраницы + Текст + Шаблоны.ШаблонКонецСтраницы;
		
	КонецЕсли;

	Возврат Текст;

КонецФункции

// ДокументацияКонстанты
//
// Параметры:
//   МассивКонстант - Массив - Массив структур описаний констант
//						Имя - Имя константы
//						Тип - Тип значения константы
//						Описание - Описание константы
//						Подсистема - Описание подсистем, которой принадлежит константа. см ГенераторДокументации.ПолучитьСтруктуруПодсистем
//   Ошибки - Массив - Коллекция ошибок генерации документации, сюда помещаем инфу об возникших ошибках
//
//  Возвращаемое значение:
//   Строка - Текст документации по модулю, если пустая строка, публикация не выполняется
//
Функция ДокументацияКонстанты(МассивКонстант, Ошибки) Экспорт

	Текст = ПомощникГенерацииДокументации.СформироватьОписаниеКонстантПоШаблонам(МассивКонстант, Шаблоны);

	Если Не ПустаяСтрока(Текст) Тогда
		
		Текст = Шаблоны.ШаблонНачалоСтраницы + Текст + Шаблоны.ШаблонКонецСтраницы;
		
	КонецЕсли;

	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область Публикация

// ОпубликоватьРаздел
//
// Параметры:
//   Раздел - СтрокаТаблицыЗначений - Описание публикуемого раздела
//				* Имя - Имя страницы/раздела
//				* Родитель - Родитель страницы, ссылку на строку этой же таблицы
//				* Содержимое - Содержимое страницы
//				* Идентификатор - Служебное поле, можно использовать при публикации
//   ОбъектыРаздела - СтрокаТаблицыЗначений - Массив описаний объектов раздела
//				* Имя - Имя объекта
//				* Родитель - Родитель страницы, ссылку на строку этой же таблицы
//				* Содержимое - Содержимое страницы
//				* Идентификатор - Служебное поле, можно использовать при публикации
//   ОшибкиПубликации - Массив - Коллекция ошибок публикации документации, сюда помещаем инфу об возникших ошибках
//
//  Возвращаемое значение:
//   Булево - Признак успешности
//
Функция ОпубликоватьРаздел(Раздел, ОбъектыРаздела, ОшибкиПубликации) Экспорт
	
	Если НЕ ПомощникГенерацииДокументации.ПроверкаВозможностиПубликацииВКаталог(КаталогПубликацииДокументации, Раздел, ОшибкиПубликации) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Успешно = Истина;
	
	Каталог = ПомощникГенерацииДокументации.СоздатьКаталогРаздела(КаталогПубликацииДокументации, Раздел);

	Для Каждого НоваяСтраница Из ОбъектыРаздела Цикл

		ИмяСтраницы = "Программный интерфейс. " + НоваяСтраница.Имя;

		Попытка
			
			ПутьКСтранице = ОбъединитьПути(Каталог, НоваяСтраница.Имя) + ".html";
			ОбщегоНазначения.ЗаписатьФайл(ПутьКСтранице, СокрЛП(НоваяСтраница.Содержимое));

		Исключение

			ОшибкиПубликации.Добавить("Ошибка создания страницы '" + НоваяСтраница.Имя + "': " + ОписаниеОшибки());
			Успешно = Ложь;

		КонецПопытки;
		
	КонецЦикла;

	Возврат Успешно;

КонецФункции

#КонецОбласти

#Область Настройки

// Производит чтение настроект из конфигурационного файла и сохраяет их в свойствах объекта
//
// Параметры:
//	 НастройкиСтенда - Объект.НастройкиСтенда - Объект, содержащий информацию конфигурационного файла
//
// Возвращаемое значение:
//	Строка - описание возникших ошибок
Функция ПрочитатьНастройки(НастройкиСтенда) Экспорт

	ТекстОшибки = "";

	НастройкиHTML = НастройкиСтенда.Настройка("AutodocGen\НастройкиHTML");
	Если ЗначениеЗаполнено(НастройкиHTML) Тогда

		Шаблоны = ПомощникГенерацииДокументации.ЗагрузитьШаблоны(НастройкиHTML["ПутьКШаблонам"], "Шаблоны_HTML.json");
		КаталогПубликацииДокументации = НастройкиHTML["КаталогПубликации"];
		АнализироватьТолькоПотомковПодсистемы = Строка(НастройкиHTML["АнализироватьТолькоПотомковПодсистемы"]);

		Если НЕ ЗначениеЗаполнено(КаталогПубликацииДокументации) Тогда

			ТекстОшибки = "Некорректные настройки каталога публикации";

		КонецЕсли;

	Иначе

		ТекстОшибки = "Отсутствуют настройки";

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

#КонецОбласти

СимволыЗамены = Новый Соответствие();
СимволыЗамены.Вставить("\", "\\");
СимволыЗамены.Вставить("&", "&amp;");
СимволыЗамены.Вставить("<", "&lt;");
СимволыЗамены.Вставить(">", "&gt;");
СимволыЗамены.Вставить(Символ(8211), "&ndash;");
СимволыЗамены.Вставить(Символ(8212), "&mdash;");
СимволыЗамены.Вставить(Символы.ПС, "<br/>");
СимволыЗамены.Вставить(Символ(13), "<br/>");
СимволыЗамены.Вставить(Символы.Таб, "    ");

