Перем КаталогПубликацииДокументации;
Перем АнализироватьТолькоПотомковПодсистемы;

Перем ГенераторСодержимого;
Перем СозданныеОбъекты;
Перем СоздаваемыеРазделы;

// Генератор документации - формирует данные для формирования документации
// Управляет потоком генерации
// Генераторы содержимого - шаблонизаторы, формируют тексты документации на основании подготовленных данных

Функция Сгенерировать(НастройкиГенератора) Экспорт
	
	// Сначала документация формируются локально, таким образом достигается целостность документации.
	// Если во время формирования одного из блоков документации возникла ошибка вся операция прерывается
	// Предварительно сформированные данные держаться в памяти

	РабочийКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(РабочийКаталог);
	
	СозданныеОбъекты = Новый ТаблицаЗначений;
	СозданныеОбъекты.Колонки.Добавить("Имя");
	СозданныеОбъекты.Колонки.Добавить("Родитель");
	СозданныеОбъекты.Колонки.Добавить("Данные");
	СозданныеОбъекты.Колонки.Добавить("Содержимое");
	СозданныеОбъекты.Колонки.Добавить("ПутьККаталогу");
	
	СоздаваемыеРазделы = СозданныеОбъекты.Скопировать();
	СоздаваемыеРазделы.Колонки.Удалить("Данные");

	Парсер = НастройкиГенератора.Парсер;

	ОшибкиГенерации = Новый Массив();
	
	Результат = Новый Структура;
	Результат.Вставить("СозданныеОбъекты", СозданныеОбъекты);
	Результат.Вставить("СоздаваемыеРазделы", СоздаваемыеРазделы);
	Результат.Вставить("ОшибкиГенерации", "");
	Результат.Вставить("СодержимоеСтраницыКонстант", "");
	Результат.Вставить("Успешно", Ложь);
	
	Если НастройкиГенератора.Свойство("ОписаниеКонфигурации") Тогда

		Для Каждого Модуль Из НастройкиГенератора.Модули Цикл
			
			ДанныеМодуля = ДанныеМодуля(Модуль, НастройкиГенератора);
			
			Если ДанныеМодуля.Ошибки.Количество() Тогда
				
				Результат.ОшибкиГенерации = СтрСоединить(ДанныеМодуля.Ошибки, Символы.ПС);
				Возврат Результат;

			ИначеЕсли ДанныеМодуля.Данные <> Неопределено Тогда
				
				ТекстОшибки = Неопределено;
				Раздел = Раздел(Модуль, ТекстОшибки);
				
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					
					Результат.ОшибкиГенерации = Модуль.ПутьКФайлу + ": " + ТекстОшибки;
					Возврат Результат;

				КонецЕсли;

				СтрокаОписания = СозданныеОбъекты.Добавить();
				СтрокаОписания.Данные = ДанныеМодуля.Данные;
				СтрокаОписания.Имя = ЧтениеОписанийБазовый.ПолноеИмяОбъекта(Модуль, Ложь);
				СтрокаОписания.Родитель = Раздел;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаОписания Из СозданныеОбъекты Цикл
			
			СтрокаОписания.Содержимое = ДокументацияПоМодулю(СтрокаОписания.Данные);
			
		КонецЦикла;

		// ОшибкиГенерацииКонстант = "";
		// СодержимоеСтраницыКонстант = ГенераторСодержимого.СформироватьТекстСтраницыКонстант(НастройкиГенератора.ОписаниеКонстант, ОшибкиГенерацииКонстант, НастройкиГенератора.ПодсистемыКонфигурации);
		// Если НЕ ПустаяСтрока(ОшибкиГенерацииКонстант) Тогда
			
		// 	ОшибкиГенерации.Добавить(ОшибкиГенерацииКонстант);
		// 	СодержимоеСтраницыКонстант = "";
			
		// КонецЕсли;
		
		// Результат.Вставить("СодержимоеСтраницыКонстант", СодержимоеСтраницыКонстант);
		
	Иначе
		
		СформироватьОписанияОдногоМодуля(НастройкиГенератора, Результат);
		
	КонецЕсли;
	
	Результат.Успешно = ПустаяСтрока(Результат.ОшибкиГенерации);

	Возврат Результат;

КонецФункции

Процедура СформироватьОписанияОдногоМодуля(НастройкиГенератора, Результат)

КонецПроцедуры


#Область ГенерацияДанных

Функция ДанныеМодуля(Модуль, НастройкиГенератора)
	
	Результат = Новый Структура("Данные, Ошибки", Неопределено, Новый Массив);
	
	Если Модуль.ТипМодуля <> ТипМодуля.ОбщийМодуль 
		И Модуль.ТипМодуля <> ТипМодуля.МодульМенеджера Тогда
		
		// Реализован анализ только для общих модулей и модулей менеджеров
		// остальные пропускаем
		Возврат Результат;
		
	КонецЕсли;

	Если Модуль.Родитель.Тип = "Constant" Тогда
		
		// Для констант не поддерживается
		Возврат Результат;

	КонецЕсли;
	
	Если НЕ ОбрабатываемФайл(НастройкиГенератора, Модуль.ПутьКФайлу) Тогда
		
		Возврат Результат;
		
	КонецЕсли;

	НастройкиГенератора.Парсер.ПрочитатьСодержимоеМодуля(Модуль);

	Если НЕ ПроверитьМодуль(Модуль, Результат.Ошибки) Тогда
			
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Данные = Новый Структура("Методы", Новый Массив);
	
	Для Каждого Блок Из Модуль.НаборБлоков Цикл
		
		Если Блок.ТипБлока <> ТипБлоковМодуля.ЗаголовокПроцедуры
			И Блок.ТипБлока <> ТипБлоковМодуля.ЗаголовокФункции Тогда
			
			Продолжить;
			
		КонецЕсли;

		ОписаниеМетода = ОписаниеМетода(Блок);
		
		ОшибкиМетода = ПроверитьМетод(ОписаниеМетода);

		Если ПустаяСтрока(ОшибкиМетода) Тогда
			
			Результат.Данные.Методы.Добавить(ОписаниеМетода);

		Иначе
			
			Результат.Ошибки.Добавить(Модуль.ПутьКФайлу + ": " + ОшибкиМетода);

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти //ГенерацияДанных

#Область Шаблонизатор

Функция ДокументацияПоМодулю(ДанныеМодуля)
	
	Содержимое = ГенераторСодержимого.ДокументацияПоМодулю(ДанныеМодуля);

	Возврат Содержимое;
	
КонецФункции

#КонецОбласти // Шаблонизатор

#Область Служебные

Функция ПроверитьМодуль(Модуль, Ошибки)
	
	Если Модуль.Родитель.Подсистемы = Неопределено Тогда
		
		Ошибки.Добавить(Модуль.ПутьКФайлу + ": не включен в состав подсистем");
		Возврат Ложь;
	
	КонецЕсли;
	
	СтруктураПодсистем = ПолучитьСтруктуруПодсистем(Модуль.Родитель.Подсистемы);
	Если ПустаяСтрока(СтруктураПодсистем.ИмяРаздела) Тогда
		
		Ошибки.Добавить(Модуль.ПутьКФайлу + ": ошибочная структура подсистем");
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстОшибки = ПроверитьРазделыМодуля(Модуль);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		Ошибки.Добавить(Модуль.ПутьКФайлу + ": " + ТекстОшибки);
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьРазделыМодуля(Модуль)
	
	Разделы = ОбязательныеРазделыМодуля(Модуль);
	
	Ошибки = Новый Массив();

	Если Модуль.НаборБлоков.Количество() 
		И Модуль.ОписаниеМодуля.Разделы.Количество() <> Разделы.Количество() Тогда
		
		// TODO: Проверить, когда указаны не корректные имена разделов, но количество совпадает
		Для Каждого ТекРаздел Из Разделы Цикл
			
			Если Модуль.ОписаниеМодуля.Разделы.Найти(ТекРаздел) = Неопределено Тогда
				
				Ошибки.Добавить(" - отсутствует раздел " + ТекРаздел);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ошибки.Количество() Тогда
			
			ТекстОшибок = "В структуре модуля неполный состав разделов: " + СтрСоединить(Ошибки);
			
		Иначе
			
			ТекстОшибок = "В структуре модуля присутсвуют дубли разделов";
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ""; 
		
КонецФункции

Функция ПроверитьМетод(ОписаниеМетода)
	
	Если ПустаяСтрока(ОписаниеМетода.ИмяРаздела) Тогда
		
		Возврат СтрШаблон("Метод '%1' находится вне раздела", ОписаниеМетода.ИмяМетода);
		
	КонецЕсли;
	
	ОжидаемЭкспортныйМетод = ОписаниеМетода.ИмяРаздела = ТипОбласти.РазделПрограммныйИнтерфейс 
							 ИЛИ ОписаниеМетода.ИмяРаздела = ТипОбласти.РазделСлужебныйПрограммныйИнтерфейс;
	
	Если НЕ ОписаниеМетода.Экспортный И ОжидаемЭкспортныйМетод Тогда
		
		Возврат СтрШаблон("В разделе %1 находится неэкспортный метод '%2'", ОписаниеМетода.ИмяРаздела, ОписаниеМетода.ИмяМетода);
		
	КонецЕсли;

	Если ОписаниеМетода.Экспортный И НЕ ОжидаемЭкспортныйМетод Тогда
		
		Возврат СтрШаблон("В разделе %1 находится экспортный метод '%2'", ОписаниеМетода.ИмяРаздела, ОписаниеМетода.ИмяМетода);
		
	КонецЕсли;
	
	Если ОписаниеМетода.ИмяРаздела = ТипОбласти.РазделПрограммныйИнтерфейс Тогда
		
		Возврат ПроверитьОписаниеМетодаAPI(ОписаниеМетода);
		
	Иначе
		
		Возврат Неопределено;

	КонецЕсли;

КонецФункции

Функция ПроверитьОписаниеМетодаAPI(ОписаниеМетода)

	Ошибки = Новый Массив();
			
	Если НЕ ЗначениеЗаполнено(ОписаниеМетода.Описание) Тогда
								
		Ошибки.Добавить(СтрШаблон("У метода '%1' не заполнено описание", ОписаниеМетода.ИмяМетода));
		
	КонецЕсли;
	
	Если ОписаниеМетода.ПараметрыМетода.Количество() Тогда
		
		Ит = 0;

		Для Каждого Параметр Из ОписаниеМетода.ПараметрыМетода Цикл
			
			Ит = Ит + 1;

			Если НЕ ЗначениеЗаполнено(Параметр.ОписаниеПараметра) Тогда
				
				Ошибки.Добавить(СтрШаблон("У метода '%1' не заполнено описание параметра №%2 (%3)", ОписаниеМетода.ИмяМетода, Ит, Параметр.Имя));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОписаниеМетода.ТипБлока = ТипБлоковМодуля.ЗаголовокФункции Тогда
		
		Если НЕ ЗначениеЗаполнено(ОписаниеМетода.ОписаниеВозвращаемогоЗначения) Тогда
			
			Ошибки.Добавить(СтрШаблон("У метода '%1' не заполнено описание возвращаемого значения", ОписаниеМетода.ИмяМетода));
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтрСоединить(Ошибки, Символы.ПС);

КонецФункции

Функция ОписаниеМетода(Блок)

	Описание = Новый Структура;
	Описание.Вставить("ТипБлока", Блок.ТипБлока);
	Описание.Вставить("ИмяРаздела", Блок.ОписаниеБлока.ИмяРаздела);
	Описание.Вставить("ИмяОбласти", Блок.ОписаниеБлока.ИмяОбласти);
	Описание.Вставить("Экспортный", Блок.ОписаниеБлока.Экспортный);
	Описание.Вставить("ИмяМетода", Блок.ОписаниеБлока.ИмяМетода);
	Описание.Вставить("Описание", Блок.ОписаниеБлока.Назначение);
	Описание.Вставить("ПараметрыМетода", Блок.ОписаниеБлока.ПараметрыМетода);
	Описание.Вставить("ОписаниеВозвращаемогоЗначения", Блок.ОписаниеБлока.ОписаниеВозвращаемогоЗначения);
	Описание.Вставить("ТипВозвращаемогоЗначения", Блок.ОписаниеБлока.ТипВозвращаемогоЗначения);
	Описание.Вставить("Примеры", Блок.ОписаниеБлока.Примеры);

	Возврат Описание;
	
КонецФункции

Функция ОбязательныеРазделыМодуля(Модуль)
	
	НужныеРазделы = Неопределено;
	
	Если Модуль.ТипМодуля = ТипМодуля.ОбщийМодуль Тогда
		
		НужныеРазделы = ТипОбласти.РазделыОбщегоМодуля;
		
	ИначеЕсли Модуль.ТипМодуля = ТипМодуля.МодульМенеджера Тогда
		
		НужныеРазделы = ТипОбласти.РазделыМодуляМенеджера;
		
	КонецЕсли;

	Возврат НужныеРазделы;

КонецФункции

#КонецОбласти

#Область Публикация

Функция Опубликовать(РезультатГенерации, НастройкиГенератора) Экспорт
	
	Ошибки = Новый Массив;
	
	Для Каждого Раздел Из РезультатГенерации.СоздаваемыеРазделы Цикл
		
		ОбъектыРаздела = РезультатГенерации.СозданныеОбъекты.НайтиСтроки(Новый Структура("Родитель", Раздел));
		
		ГенераторСодержимого.ОпубликоватьРаздел(Раздел, ОбъектыРаздела);
		
	КонецЦикла;

	Возврат СтрСоединить(Ошибки, Символы.ПС);

КонецФункции

#КонецОбласти

Функция Раздел(Модуль, ТекстОшибки)

	СтруктураПодсистем = ПолучитьСтруктуруПодсистем(Модуль.Родитель.Подсистемы);
	Если ПустаяСтрока(СтруктураПодсистем.ИмяРаздела) Тогда
		
		ТекстОшибки = "Ошибочная структура подсистем";
		Возврат Неопределено;
		
	КонецЕсли;
	
	Раздел = СоздаваемыеРазделы.Найти(СтруктураПодсистем.ИмяРаздела, "Имя");
	Если Раздел = Неопределено Тогда
		
		Раздел = СоздаваемыеРазделы.Добавить();
		Раздел.Имя = СтруктураПодсистем.ИмяРаздела;
		Раздел.Содержимое = СтруктураПодсистем.ОписаниеРаздела;

	КонецЕсли;
	
	ИмяПодсистемы = "Подсистема " + СтруктураПодсистем.ИмяПодсистемы;
	Если СтруктураПодсистем.ИмяПодсистемы = "Общего назначения" Тогда
		
		ИмяПодсистемы = ИмяПодсистемы + " (" + НРег(СтруктураПодсистем.ИмяРаздела) + ")";
		
	КонецЕсли;
	
	Подсистема = СоздаваемыеРазделы.Найти(ИмяПодсистемы, "Имя");

	Если Подсистема = Неопределено Тогда
		
		Подсистема = СоздаваемыеРазделы.Добавить();
		Подсистема.Имя = ИмяПодсистемы;
		Подсистема.Содержимое = СтруктураПодсистем.ОписаниеПодсистемы;
		Подсистема.Родитель = Раздел;

	КонецЕсли; 

	Возврат Подсистема;

КонецФункции

Функция ОбрабатываемФайл(НастройкиГенератора, ИмяФайла)

	Возврат НЕ НастройкиГенератора.НастройкиАнализаИзменений.Анализировать 
		ИЛИ НастройкиГенератора.НастройкиАнализаИзменений.ИзмененныеФайлы.Найти(НРег(ИмяФайла)) <> Неопределено;

КонецФункции

Функция ПолучитьСтруктуруПодсистем(Подсистемы)
	
	ИскомаяПодсистема = Неопределено;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		
		Если Подсистема.Визуальная Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(АнализироватьТолькоПотомковПодсистемы) И Не СтрНачинаетсяС(Подсистема.ПодсистемаИмя, АнализироватьТолькоПотомковПодсистемы) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Имена = СтрРазделить(Подсистема.Представление, "/");
		Если Имена.Количество() <> 3 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИскомаяПодсистема = Подсистема;
		Прервать;
		
	КонецЦикла;
	
	СтруктураПодсистем = Новый Структура("ИмяРаздела, ИмяПодсистемы, ОписаниеРаздела, ОписаниеПодсистемы", "", "", "", "");
	Если ИскомаяПодсистема <> Неопределено Тогда
		
		СтруктураПодсистем.ИмяРаздела = ИскомаяПодсистема.Родитель.ПредставлениеКратко;
		СтруктураПодсистем.ИмяПодсистемы = ИскомаяПодсистема.ПредставлениеКратко;
		СтруктураПодсистем.ОписаниеРаздела = ИскомаяПодсистема.Родитель.ПодсистемаОписание;
		СтруктураПодсистем.ОписаниеПодсистемы = ИскомаяПодсистема.ПодсистемаОписание;
		
	КонецЕсли;
	
	Возврат СтруктураПодсистем;
	
КонецФункции

Процедура ПриСозданииОбъекта(Шаблонизатор)
	
	ГенераторСодержимого = Шаблонизатор;
	
КонецПроцедуры