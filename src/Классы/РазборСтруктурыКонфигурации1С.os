///////////////////////////////////////////////////////////////////
//
// Модуль разбора файлов конфигурации 
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////

Функция ПрочитатьДеревоКонфигурации(КаталогИсходников)Экспорт
	
	ОписаниеКонфигурации = ПрочитатьОписаниеКонфигурации(КаталогИсходников);
	
	// определим иерархию
	// схема определения проста, если есть каталог "Languages" то иерархия в формате 8.3.8
	КаталогЯзыки = ОбъединитьПути(КаталогИсходников, "Languages");
	ФайлКаталогЯзыки = Новый Файл(КаталогЯзыки);
	ИерархическийФормат = ФайлКаталогЯзыки.Существует();
	ОписаниеКонфигурации.СвойстваКонфигурации.Вставить("ИерархическийФормат", ИерархическийФормат);
	
	ЗаполнитьИменаФайлов(ОписаниеКонфигурации.ОбъектыКонфигурации, КаталогИсходников, ИерархическийФормат);
	
	Возврат ОписаниеКонфигурации;
	
КонецФункции

Функция ПрочитатьМодулиКонфигурации(КаталогИсходников, ОписаниеКонфигурации)Экспорт
	
	МодулиКонфигурации = ОписаниеТаблицыМодулей();
	
	// todo сделать чтение форм
	ФормыКонфигурации = Новый ТаблицаЗначений;
	ФормыКонфигурации.Колонки.Добавить("Родитель");
	ФормыКонфигурации.Колонки.Добавить("ЭтоУправляемаяФорма");
	ФормыКонфигурации.Колонки.Добавить("Наименование");
	
	// todo сделать чтение команд
	КомандыКонфигурации = Новый ТаблицаЗначений;
	КомандыКонфигурации.Колонки.Добавить("Родитель");
	КомандыКонфигурации.Колонки.Добавить("Наименование");
	
	ФильтрФайлов = ?(ОписаниеКонфигурации.СвойстваКонфигурации.ИерархическийФормат, "*.bsl", "*.txt");
	Для Каждого ОбъектКонфигурации Из ОписаниеКонфигурации.ОбъектыКонфигурации Цикл
		
		Если ПустаяСтрока(ОбъектКонфигурации.ПутьККаталогу) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НайденныеФайлы = НайтиФайлы(ОбъектКонфигурации.ПутьККаталогу, "*", ИСТИНА);
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			
			Если НайденныйФайл.ЭтоКаталог() Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ (НайденныйФайл.Расширение = "" ИЛИ СтрНайти(ФильтрФайлов, "*" + НайденныйФайл.Расширение)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ПолучитьОписаниеМодуляПоИмениФайла(НайденныйФайл, ОбъектКонфигурации, МодулиКонфигурации, ФормыКонфигурации, КомандыКонфигурации);
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ОписаниеКонфигурации.Вставить("ФормыКонфигурации", ФормыКонфигурации);
	ОписаниеКонфигурации.Вставить("КомандыКонфигурации", КомандыКонфигурации);
	ОписаниеКонфигурации.Вставить("МодулиКонфигурации", МодулиКонфигурации);
	
	Возврат ОписаниеКонфигурации;
	
КонецФункции

Функция ПрочитатьОписаниеКонстант(КаталогИсходников, ОписаниеКонфигурации)Экспорт
	
	Фильтр = Новый Структура("Тип", "Constant");
	
	СтрокиКонстант = ОписаниеКонфигурации.ОбъектыКонфигурации.НайтиСтроки(Фильтр);
	
	МассивОписанийКонстант = Новый Массив;
	Для Каждого Объект Из СтрокиКонстант Цикл
		
		Имя = Объект[0];
		ОписаниеИзXML = ПолучитьОписаниеКонстанты(Объект[2]);
		Подсистема = "";
		ПодсистемаПредставление = "";
		Если ТипЗнч(Объект[4]) = Тип("Массив") Тогда

			Подсистема = Объект[4][0][1];
			ПодсистемаПредставление = Объект[4][0][6];
			
		КонецЕсли;

		ОписаниеКонстанты = Новый Структура("Имя, Тип, Описание, Подсистема, ПодсистемаПредставление",  
											Имя, 
											ПреобразоватьТип(ОписаниеИзXML.ТипКонстанты), 
											ОписаниеИзXML.ТекстОписания, 
											Подсистема, 
											ПодсистемаПредставление);
		МассивОписанийКонстант.Добавить(ОписаниеКонстанты);
		
	КонецЦикла;
	
	Возврат МассивОписанийКонстант;
	
КонецФункции

Процедура ПрочитатьСодержимоеМодуля(СтрокаМодуль)Экспорт
	
	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(СтрокаМодуль.ПутьКФайлу);	
	
	СодержимоеМодуля = ПрочитатьМодуль(Файл);
	СтрокаМодуль.Содержимое = СодержимоеМодуля.Содержимое;
	
	ДополнитьБлокиМодуля(СодержимоеМодуля.БлокиМодуля, Файл, СтрокаМодуль);
	СтрокаМодуль.НаборБлоков = СодержимоеМодуля.БлокиМодуля;
	
	Если Не ПустаяСтрока(СтрокаМодуль.Родитель.ПутьКФайлуСОписанием) Тогда
		
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(СтрокаМодуль.Родитель.ПутьКФайлуСОписанием);
		Если СтрНайти(Текст.ПолучитьТекст(), "<Global>true</Global>") Тогда
			
			СтрокаМодуль.ОписаниеМодуля.Вставить("Глобальный", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолноеИмяМодуля(СтрокаМодуль) Экспорт
	
	ПолноеИмя = ПолноеИмяОбъекта(СтрокаМодуль);
	Если СтрокаМодуль.ТипМодуля = ТипМодуля.ОбщийМодуль Тогда
		
		// не надо дописывать
		
	ИначеЕсли СтрокаМодуль.ТипМодуля = ТипМодуля.МодульМенеджера			
		ИЛИ СтрокаМодуль.ТипМодуля = ТипМодуля.МодульОбъекта  Тогда
		
		ПолноеИмя = ПолноеИмя + "." + СтрокаМодуль.ТипМодуля;
		
	ИначеЕсли СтрокаМодуль.ТипМодуля = ТипМодуля.МодульУправляемойФормы Тогда
		
		ПолноеИмя = ПолноеИмя + ".Форма." + СтрокаМодуль.РодительФорма.Наименование + ".МодульФормы";
		
	ИначеЕсли СтрокаМодуль.ТипМодуля = ТипМодуля.МодульКоманды Тогда
		
		ПолноеИмя = ПолноеИмя + ".Команда." + СтрокаМодуль.РодительКоманда.Наименование + ".МодульКоманды";
		
	Иначе
		
		ПолноеИмя = ПолноеИмя + "." + СтрокаМодуль.ТипМодуля;
		
	КонецЕсли;
	
	Возврат ПолноеИмя; 
	
КонецФункции

Функция ПолноеИмяОбъекта(СтрокаМодуль, ДобавлятьПрефиксДляОбщихМодулей = ИСТИНА) Экспорт
	
	Если СтрокаМодуль.ТипМодуля <> ТипМодуля.ОбщийМодуль
		ИЛИ ДобавлятьПрефиксДляОбщихМодулей Тогда
		
		Возврат ПолучитьИмяТипаНаРусском(СтрокаМодуль.Родитель.Тип) + "." + СтрокаМодуль.Родитель.Наименование;
		
	Иначе
		
		Возврат СтрокаМодуль.Родитель.Наименование;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОписаниеМодуляПоИмениФайла(Знач НайденныйФайл, ОбъектКонфигурации = Неопределено, МодулиКонфигурации = Неопределено, ФормыКонфигурации = Неопределено, КомандыКонфигурации = Неопределено)Экспорт
	
	НовыйМодульКонфигурации = Неопределено;
	
	Если МодулиКонфигурации = Неопределено Тогда
		
		МодулиКонфигурации = ОписаниеТаблицыМодулей();
		ФормыКонфигурации = Новый ТаблицаЗначений;
		КомандыКонфигурации = Новый ТаблицаЗначений;
		ОбъектКонфигурации = Новый Структура("Наименование, Тип, ПутьКФайлуСОписанием, ПутьККаталогу, Подсистемы"); // заглушка
		
	КонецЕсли;
	
	ПустаяСтрокаМодульКонфигурации = Новый Структура(
	"ПутьКФайлу,	ТипМодуля,	ОписаниеМодуля,		Родитель, 		РодительФорма, 	РодительКоманда, 	НаборБлоков, 	Содержимое", 
	"", 			"", 		Новый Структура,	Неопределено, 	Неопределено, 	Неопределено, 		Неопределено, 	Неопределено);
	
	ТипЭтогоМодуля = ТипМодуля.ТипМодуляПоИмениФайла(НайденныйФайл.ПолноеИмя);
	Если Не ПустаяСтрока(ТипЭтогоМодуля) Тогда
		
		Если ТипЭтогоМодуля = ТипМодуля.МодульОбъекта
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульМенеджера
			ИЛИ ТипЭтогоМодуля = ТипМодуля.ОбщийМодуль
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульУправляемогоПриложения
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульСеанса
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульВнешнегоСоединения
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульОбычногоПриложения  Тогда
			
			НовыйМодульКонфигурации = МодулиКонфигурации.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйМодульКонфигурации, ПустаяСтрокаМодульКонфигурации);
			НовыйМодульКонфигурации.ТипМодуля = ТипЭтогоМодуля;
			НовыйМодульКонфигурации.ПутьКФайлу = НайденныйФайл.ПолноеИмя;
			НовыйМодульКонфигурации.Родитель = ОбъектКонфигурации;
			
		ИначеЕсли ТипЭтогоМодуля = ТипМодуля.МодульУправляемойФормы
			ИЛИ ТипЭтогоМодуля = ТипМодуля.МодульОбычнойФормы Тогда
			
			ФормаОбъекта = ФормыКонфигурации.Добавить();
			ФормаОбъекта.Родитель = ОбъектКонфигурации;
			ФормаОбъекта.ЭтоУправляемаяФорма = ТипЭтогоМодуля = ТипМодуля.МодульУправляемойФормы;
			ФормаОбъекта.Наименование = ПолучитьИмяФормыИзИмениФайлаМодуля(НайденныйФайл.ПолноеИмя);
			
			НовыйМодульКонфигурации = МодулиКонфигурации.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйМодульКонфигурации, ПустаяСтрокаМодульКонфигурации);
			НовыйМодульКонфигурации.ТипМодуля = ТипЭтогоМодуля;
			НовыйМодульКонфигурации.ПутьКФайлу = НайденныйФайл.ПолноеИмя;
			НовыйМодульКонфигурации.Родитель = ОбъектКонфигурации;
			НовыйМодульКонфигурации.РодительФорма = ФормаОбъекта;
			
		ИначеЕсли ТипЭтогоМодуля = ТипМодуля.МодульКоманды Тогда
			
			КомандаОбъекта = КомандыКонфигурации.Добавить();
			КомандаОбъекта.Родитель = ОбъектКонфигурации;
			КомандаОбъекта.Наименование = ПолучитьИмяКомандыИзИмениФайлаМодуля(НайденныйФайл.ПолноеИмя);
			
			НовыйМодульКонфигурации = МодулиКонфигурации.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйМодульКонфигурации, ПустаяСтрокаМодульКонфигурации);
			НовыйМодульКонфигурации.ТипМодуля = ТипЭтогоМодуля;
			НовыйМодульКонфигурации.ПутьКФайлу = НайденныйФайл.ПолноеИмя;
			НовыйМодульКонфигурации.Родитель = ОбъектКонфигурации;
			НовыйМодульКонфигурации.РодительКоманда = КомандаОбъекта;
			
		Иначе
			
			ВызватьИсключение "Тип модуля: " + ТипЭтогоМодуля + " не имеет алгоритма разбора";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйМодульКонфигурации <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ПустаяСтрокаМодульКонфигурации, НовыйМодульКонфигурации);
		
	КонецЕсли;
	
	Возврат ПустаяСтрокаМодульКонфигурации;
	
КонецФункции

///////////////////////////////////////////////////////////////////

Функция СформироватьОписаниеОбъекта(КореньОписания)
	
	ОписаниеОбъекта = Новый Структура;
	ВеткаСвойства = КореньОписания.Найти("Properties", "Имя");
	Если ВеткаСвойства <> Неопределено Тогда
		
	КонецЕсли;
	
	ВеткаПодчиненныеОбъекты = КореньОписания.Найти("ChildObjects", "Имя");
	Если ВеткаПодчиненныеОбъекты <> Неопределено И ТипЗнч(ВеткаПодчиненныеОбъекты.Значение) = Тип("ТаблицаЗначений") Тогда
		
		Формы = СформироватьОписаниеОбъектаФормы(ВеткаПодчиненныеОбъекты.Значение);
		Если Формы <> Неопределено Тогда
			
			ОписаниеОбъекта.Вставить("Формы", Формы);
			
		КонецЕсли;
		
		Реквизиты = СформироватьОписаниеОбъектаРеквизиты(ВеткаПодчиненныеОбъекты.Значение);
		Если Реквизиты <> Неопределено Тогда
			
			ОписаниеОбъекта.Вставить("Реквизиты", Реквизиты);
			
		КонецЕсли;
		
		ТЧ = СформироватьОписаниеОбъектаТабличныеЧасти(ВеткаПодчиненныеОбъекты.Значение);
		Если ТЧ <> Неопределено Тогда
			
			ОписаниеОбъекта.Вставить("ТабличныеЧасти", ТЧ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

Функция СформироватьОписаниеОбъектаФормы(ПодчиненныеОбъекты)
	
	СтрФормы = ПодчиненныеОбъекты.НайтиСтроки(Новый Структура("Имя", "Form"));
	Если СтрФормы.Количество() Тогда
		
		Формы = Новый Массив;
		Для Каждого СтрФорма Из СтрФормы Цикл
			
			Формы.ДобавитЬ(СтрФорма.Значение);
			
		КонецЦикла;
		
		Возврат Формы;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьОписаниеОбъектаРеквизиты(ПодчиненныеОбъекты)
	
	СтрАтрибуты = ПодчиненныеОбъекты.НайтиСтроки(Новый Структура("Имя", "Attribute"));
	Если СтрАтрибуты.Количество() Тогда
		
		Реквизиты = Новый ТаблицаЗначений;
		Реквизиты.Колонки.Добавить("Имя");
		Для Каждого СтрАтрибут Из СтрАтрибуты Цикл
			
			ОписаниеАтрибута = СтрАтрибут.Значение.Найти("Properties", "Имя");
			Если ОписаниеАтрибута = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрНаименования = ОписаниеАтрибута.Значение.Найти("Name", "Имя");
			Если СтрНаименования = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйРеквизит = Реквизиты.Добавить();
			НовыйРеквизит.Имя = СтрНаименования.Значение;
			Для Каждого ЭлОписания Из ОписаниеАтрибута.Значение Цикл
				
				Если ЭлОписания.Имя = "Name" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Реквизиты.Колонки.Найти(ЭлОписания.Имя) = Неопределено Тогда
					
					Попытка
						
						Реквизиты.Колонки.Добавить(ЭлОписания.Имя);
						
					Исключение
						
						Продолжить;
						
					КонецПопытки;
					
				КонецЕсли;
				
				НовыйРеквизит[ЭлОписания.Имя] = ЭлОписания.Значение;
				
			КонецЦикла
			
		КонецЦикла;
		
		Возврат Реквизиты;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьОписаниеОбъектаТабличныеЧасти(ПодчиненныеОбъекты)
	
	СтрТЧ = ПодчиненныеОбъекты.НайтиСтроки(Новый Структура("Имя", "TabularSection"));
	Если СтрТЧ.Количество() Тогда
		
		ТЧ = Новый ТаблицаЗначений;
		ТЧ.Колонки.Добавить("Имя");
		ТЧ.Колонки.Добавить("Описание");
		ТЧ.Колонки.Добавить("Реквизиты");
		Для Каждого Стр Из СтрТЧ Цикл
			
			СтрОписание = СформироватьОписаниеОбъекта(Стр.Значение);
			Если СтрОписание.Свойство("Описание") Тогда
				
				СтрНаименования = СтрОписание.Описание.Найти("Name", "Имя");
				Если СтрНаименования <> Неопределено Тогда
					
					НоваяТЧ = ТЧ.Добавить();
					НоваяТЧ.Имя = СтрНаименования.Значение;
					НоваяТЧ.Описание = СтрОписание.Описание;
					
					Если СтрОписание.Свойство("Реквизиты") Тогда
						
						НоваяТЧ.Реквизиты = СтрОписание.Реквизиты;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Возврат ТЧ;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

///////////////////////////////////////////////////////////////////

Функция ОписаниеТаблицыМодулей()
	
	МодулиКонфигурации = Новый ТаблицаЗначений;
	МодулиКонфигурации.Колонки.Добавить("ТипМодуля");
	МодулиКонфигурации.Колонки.Добавить("Родитель");
	МодулиКонфигурации.Колонки.Добавить("ПутьКФайлу");	
	МодулиКонфигурации.Колонки.Добавить("НаборБлоков");
	МодулиКонфигурации.Колонки.Добавить("Содержимое");
	МодулиКонфигурации.Колонки.Добавить("РодительФорма");
	МодулиКонфигурации.Колонки.Добавить("РодительКоманда");	
	МодулиКонфигурации.Колонки.Добавить("ОписаниеМодуля");
	
	Возврат МодулиКонфигурации;
	
КонецФункции

Функция ПолучитьОписаниеКонстанты(ПутьКФайлу)
	
	ТекстОписания = "";
	ТипКонстанты = "";
	
	ФайлXML = Новый ЧтениеXML();
	ФайлXML.ОткрытьФайл(ПутьКФайлу);
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "Explanation" Тогда
			
			ФайлXML.Прочитать();
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // вложенный элемент
				
				Если ФайлXML.Имя = "v8:item" Тогда // надо найти элемент с именем v8:content
					
					Пока ФайлXML.Имя <> "v8:content" Цикл
						
						ФайлXML.Прочитать();
						
					КонецЦикла;
					
					ФайлXML.Прочитать();
					ТекстОписания = ТекстОписания + ?(ПустаяСтрока(ТекстОписания), "", Символы.ПС) + ФайлXML.Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ФайлXML.Имя = "v8:Type" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ФайлXML.Прочитать();
			ТипКонстанты = ФайлXML.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоиска = Новый Структура("ТипКонстанты, ТекстОписания", ТипКонстанты, ТекстОписания);
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция ПреобразоватьТип(ТипИзXML)
	
	СоответствиеТипов = Новый Соответствие;
	
	СоответствиеТипов.Вставить("xs:boolean", "Булево");
	СоответствиеТипов.Вставить("xs:decimal", "Число");
	СоответствиеТипов.Вставить("xs:string", "Строка");
	СоответствиеТипов.Вставить("xs:dateTime", "Дата");
	СоответствиеТипов.Вставить("v8:ValueStorage", "Хранилище Значений");
	СоответствиеТипов.Вставить("v8:UUID", "UUID");
	СоответствиеТипов.Вставить("v8:Null", "Null");
	
	Если СтрНачинаетсяС(ТипИзXML, "xs") Или СтрНачинаетсяС(ТипИзXML, "v8") Тогда
		
		ПреобразованныйТип = СоответствиеТипов[ТипИзXML];
		
	ИначеЕсли СтрНачинаетсяС(ТипИзXML, "cfg:") Тогда
		
		ТипИзXML = СтрЗаменить(ТипИзXML, "cfg:", "");
		ЧастиТипа = СтрРазделить(ТипИзXML, ".");
		ТипОбъекта = СтрЗаменить(ЧастиТипа[0], "Ref", "");
		
		ПреобразованныйТип = ПолучитьИмяТипаНаРусском(ТипОбъекта) + "." + ЧастиТипа[1];
		
	Иначе
		
		ПреобразованныйТип = ТипИзXML;
		
	КонецЕсли;
	Возврат ПреобразованныйТип;
	
КонецФункции

Функция ПрочитатьОписаниеКонфигурации(КаталогИсходников)
	
	ФайлКонфигурации = ОбъединитьПути(КаталогИсходников, "Configuration.xml");
	Файл = Новый Файл(ФайлКонфигурации);
	Если Не Файл.Существует() Тогда
		
		ВызватьИсключение "Файл описания конфигурации не обнаружен";
		
	КонецЕсли;
	
	СвойстваКонфигурации = Новый Структура;
	ОбъектыКонфигурации = Новый ТаблицаЗначений;
	ОбъектыКонфигурации.Колонки.Добавить("Наименование");
	ОбъектыКонфигурации.Колонки.Добавить("Тип");
	ОбъектыКонфигурации.Колонки.Добавить("ПутьКФайлуСОписанием");
	ОбъектыКонфигурации.Колонки.Добавить("ПутьККаталогу");
	ОбъектыКонфигурации.Колонки.Добавить("Подсистемы");
	
	ПустаяСтрокаОбъектКонфигурации = Новый Структура(
	"Наименование, Тип, ПутьКФайлуСОписанием, ПутьККаталогу, Подсистема", 
	"", "", "", "", Новый Массив);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлКонфигурации);
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Properties" Тогда
			
			// Настройки
			Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Properties") Цикл
				
				ЧтениеXML.Прочитать();
				КлючСвойства = "";
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					
					Если ЧтениеXML.Имя = "RequiredMobileApplicationPermissions" Тогда // атрибуты мобильного приложения
						
						Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "RequiredMobileApplicationPermissions") Цикл
							
							ЧтениеXML.Прочитать();
							
						КонецЦикла;
						
					Иначе
						
						КлючСвойства = ЧтениеXML.Имя;
						ЧтениеXML.Прочитать();
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // вложенный элемент
							
							Если ЧтениеXML.Имя = "v8:item" Тогда // надо найти элемент с именем v8:content
								
								Пока ЧтениеXML.Имя <> "v8:content" Цикл
									
									ЧтениеXML.Прочитать();
									
								КонецЦикла;
								ЧтениеXML.Прочитать();
								
							Иначе // просто ищем значение
								
								Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
									
									ЧтениеXML.Прочитать();
									
								КонецЦикла;
								
							КонецЕсли;
							
							СвойстваКонфигурации.Вставить(КлючСвойства, ЧтениеXML.Значение);						

						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "ChildObjects" Тогда
			
			ЧтениеXML.Прочитать();
			// подчиненные элементы (первый уровень)
			Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
				
				НовСтрока = ОбъектыКонфигурации.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ПустаяСтрокаОбъектКонфигурации);
				НовСтрока.Тип = ЧтениеXML.Имя;
				ЧтениеXML.Прочитать();
				НовСтрока.Наименование = ЧтениеXML.Значение;
				ЧтениеXML.Прочитать();				
				ЧтениеXML.Прочитать();
				
			КонецЦикла  			
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	// добавим руками объект "Configuration" для модулей приложения
	НовСтрока = ОбъектыКонфигурации.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, ПустаяСтрокаОбъектКонфигурации);
	НовСтрока.Тип = "Configuration";
	НовСтрока.Наименование = "";
	
	// дополним объекты информацией о подсистемах
	ПодсистемыКонфигурации = ПрочитатьПодсистемыКонфигурации(КаталогИсходников);
	Для Каждого ОбъектКонфигурации Из ОбъектыКонфигурации Цикл
		
		Подсистемы = ПодсистемыКонфигурации.НайтиСтроки(Новый Структура("ОбъектМетаданных", ОбъектКонфигурации.Тип + "." + ОбъектКонфигурации.Наименование));
		Если Подсистемы.Количество()  Тогда
			
			// ставим первую
			ОбъектКонфигурации.Подсистемы = Подсистемы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("СвойстваКонфигурации, ОбъектыКонфигурации, ПодсистемыКонфигурации", СвойстваКонфигурации, ОбъектыКонфигурации, ПодсистемыКонфигурации);
	
КонецФункции

Функция ПолучитьИмяТипаНаРусском(ИмяТипа) Экспорт
	
	ИмяТипаРус = ИмяТипа;
	Если ИмяТипа = "Language" Тогда
		
		ИмяТипаРус = "Язык";
		
	ИначеЕсли ИмяТипа = "Subsystem" Тогда
		
		ИмяТипаРус = "Подсистема";
		
	ИначеЕсли ИмяТипа = "CommonPicture" Тогда
		
		ИмяТипаРус = "ОбщаяКартинка";
		
	ИначеЕсли ИмяТипа = "SessionParameter" Тогда
		
		ИмяТипаРус = "ПараметрСеанса";
		
	ИначеЕсли ИмяТипа = "Role" Тогда
		
		ИмяТипаРус = "Роль";
		
	ИначеЕсли ИмяТипа = "CommonTemplate" Тогда
		
		ИмяТипаРус = "ОбщийМакет";
		
	ИначеЕсли ИмяТипа = "FilterCriterion" Тогда
		
		ИмяТипаРус = "КритерийОтбора";
		
	ИначеЕсли ИмяТипа = "CommonModule" Тогда
		
		ИмяТипаРус = "ОбщийМодуль";
		
	ИначеЕсли ИмяТипа = "CommonAttribute" Тогда
		
		ИмяТипаРус = "ОбщийРеквизит";
		
	ИначеЕсли ИмяТипа = "ExchangePlan" Тогда
		
		ИмяТипаРус = "ПланОбмена";
		
	ИначеЕсли ИмяТипа = "XDTOPackage" Тогда
		
		ИмяТипаРус = "XDTOПакет";
		
	ИначеЕсли ИмяТипа = "WebService" Тогда
		
		ИмяТипаРус = "WebСервис";
		
	ИначеЕсли ИмяТипа = "EventSubscription" Тогда
		
		ИмяТипаРус = "ПодпискаНаСобытие";
		
	ИначеЕсли ИмяТипа = "ScheduledJob" Тогда
		
		ИмяТипаРус = "РегламентноеЗадание";
		
	ИначеЕсли ИмяТипа = "FunctionalOption" Тогда
		
		ИмяТипаРус = "ФункциональнаяОпция";
		
	ИначеЕсли ИмяТипа = "DefinedType" Тогда
		
		ИмяТипаРус = "ОпределяемыйТип";
		
	ИначеЕсли ИмяТипа = "CommonCommand" Тогда
		
		ИмяТипаРус = "ОбщаяКоманда";
		
	ИначеЕсли ИмяТипа = "Constant" Тогда
		
		ИмяТипаРус = "Константа";
		
	ИначеЕсли ИмяТипа = "CommonForm" Тогда
		
		ИмяТипаРус = "ОбщаяФорма";
		
	ИначеЕсли ИмяТипа = "Catalog" Тогда
		
		ИмяТипаРус = "Справочник";
		
	ИначеЕсли ИмяТипа = "Document" Тогда
		
		ИмяТипаРус = "Документ";
		
	ИначеЕсли ИмяТипа = "Enum" Тогда
		
		ИмяТипаРус = "Перечисление";
		
	ИначеЕсли ИмяТипа = "Report" Тогда
		
		ИмяТипаРус = "Отчет";
		
	ИначеЕсли ИмяТипа = "DataProcessor" Тогда
		
		ИмяТипаРус = "Обработка";
		
	ИначеЕсли ИмяТипа = "InformationRegister" Тогда
		
		ИмяТипаРус = "РегистрСведений";
		
	ИначеЕсли ИмяТипа = "ChartOfCharacteristicTypes" Тогда
		
		ИмяТипаРус = "ПланВидовХарактеристик";
		
	ИначеЕсли ИмяТипа = "Task" Тогда
		
		ИмяТипаРус = "Задача";
		
	ИначеЕсли ИмяТипа = "BusinessProcess" Тогда
		
		ИмяТипаРус = "БизнесПроцесс";	
		
	КонецЕсли;
	
	Возврат ИмяТипаРус;
	
КонецФункции

///////////////////////////////////////////////////////////////////

Процедура ЗаполнитьИменаФайлов(ОбъектыКонфигурации, КаталогИсходников, ИерархическийФормат)
	
	Переименования = Неопределено;
	
	Для Каждого СтрокаОбъектКонфигурации Из ОбъектыКонфигурации Цикл
		
		ИмяТипа = СтрокаОбъектКонфигурации.Тип;
		Если ИерархическийФормат И СтрокаОбъектКонфигурации.Тип = "FilterCriterion" Тогда
			
			ИмяТипа = "FilterCriteria"; 
			
		ИначеЕсли ИерархическийФормат И СтрокаОбъектКонфигурации.Тип = "ChartOfCharacteristicTypes" Тогда
			
			ИмяТипа = "ChartsOfCharacteristicTypes";
			
		ИначеЕсли ИерархическийФормат И СтрокаОбъектКонфигурации.Тип = "BusinessProcess" Тогда
			
			ИмяТипа = ?(ИерархическийФормат, "BusinessProcesses", СтрокаОбъектКонфигурации.Тип);
			
		ИначеЕсли СтрокаОбъектКонфигурации.Тип = "Configuration" Тогда
			
			ИмяТипа = ?(ИерархическийФормат, "Ext", СтрокаОбъектКонфигурации.Тип);
			
		Иначе
			
			ИмяТипа = ?(ИерархическийФормат, СтрокаОбъектКонфигурации.Тип + "s", СтрокаОбъектКонфигурации.Тип);
			
		КонецЕсли;		
		
		КаталогРодителя = ОбъединитьПути(КаталогИсходников, ИмяТипа);
		ФайлКаталог = Новый Файл(КаталогРодителя);
		Если НЕ ФайлКаталог.Существует() Тогда
			
			Сообщить("Не найден каталог для типа " + СтрокаОбъектКонфигурации.Тип);
			Продолжить;
			
		КонецЕсли; 
		
		КаталогОбъекта = ОбъединитьПути(КаталогРодителя, СтрокаОбъектКонфигурации.Наименование);
		ФайлКаталог = Новый Файл(КаталогОбъекта);
		
		Если НЕ ФайлКаталог.Существует() Тогда
			
			Если Не ИерархическийФормат Тогда
				
				Сообщить("Не найден каталог для объекта метаданных " + ИмяТипа + "." + СтрокаОбъектКонфигурации.Наименование);
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаОбъектКонфигурации.ПутьККаталогу = КаталогОбъекта;
			
		КонецЕсли;	
		
		Если НЕ СтрокаОбъектКонфигурации.Тип = "Configuration" Тогда
			
			Если ИерархическийФормат Тогда
				
				ФайлСОписанием = ОбъединитьПути(КаталогРодителя, СтрокаОбъектКонфигурации.Наименование + ".xml");
				
			Иначе
				
				ФайлСОписанием = ОбъединитьПути(КаталогОбъекта, СтрокаОбъектКонфигурации.Наименование + ".xml");
				
			КонецЕсли;
			
			ФайлФайлСОписанием = Новый Файл(ФайлСОписанием);
			Если НЕ ФайлФайлСОписанием.Существует() Тогда
				
				Если Переименования = Неопределено Тогда
					
					Переименования = Новый Соответствие;
					ФайлПереименований = ОбъединитьПути(КаталогИсходников, "renames.txt");
					Текст = Новый ТекстовыйДокумент;
					Текст.Прочитать(ФайлПереименований);
					
					Для Ит = 1 По Текст.КоличествоСтрок() Цикл
						
						ОписаниеПереименования = СтрРазделить(Текст.ПолучитьСтроку(Ит), "-->");
						Переименования.Вставить(ОписаниеПереименования[0], ОписаниеПереименования[1]);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ФайлСОписанием = СтрЗаменить(ФайлСОписанием, КаталогИсходников, "");
				ОписаниеФайлОписание = СтрРазделить(ФайлСОписанием, "\");
				Если ОписаниеФайлОписание[ОписаниеФайлОписание.Количество() - 1] = ОписаниеФайлОписание[ОписаниеФайлОписание.Количество() - 2] + ".xml" Тогда
					
					ОписаниеФайлОписание.Удалить(ОписаниеФайлОписание.Количество() - 2);
					
				КонецЕсли;
				
				ФайлСОписанием = СтрСоединить(ОписаниеФайлОписание, ".");
				ФайлСОписанием = Переименования.Получить(СтрЗаменить(ФайлСОписанием, КаталогИсходников, ""));
				ФайлСОписанием = ОбъединитьПути(КаталогИсходников, ФайлСОписанием);
				ФайлФайлСОписанием = Новый Файл(ФайлСОписанием);
				Если НЕ ФайлФайлСОписанием.Существует() Тогда
					
					Сообщить("Не найден файл с описание объекта метаданных " + ИмяТипа + "." + СтрокаОбъектКонфигурации.Наименование);
					Продолжить;
					
				КонецЕсли;			
				
			КонецЕсли;
			
			СтрокаОбъектКонфигурации.ПутьКФайлуСОписанием = ФайлСОписанием;
			
		Иначе
			
			СтрокаОбъектКонфигурации.ПутьКФайлуСОписанием = "";
			
		КонецЕсли;	
		
	КонецЦикла
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////

Функция ПолучитьИмяФормыИзИмениФайлаМодуля(ПолноеИмяФайла)
	
	МассивЧастейИмени = СтрРазделить(ПолноеИмяФайла, "\");
	Если МассивЧастейИмени.Количество() > 3 Тогда
		
		Номер = 2;
		Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];
		Если Родитель = "Form" Тогда
			
			Номер = Номер + 1;
			Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];
			
		КонецЕсли;
		
		Если Родитель = "Ext" Тогда
			
			Номер = Номер + 1;
			Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];
			
		КонецЕсли;
		
		Возврат Родитель;
		
	Иначе
		
		ВызватьИсключение "Ошибочная структура имени файла: " + ПолноеИмяФайла;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьИмяКомандыИзИмениФайлаМодуля(ПолноеИмяФайла)
	
	МассивЧастейИмени = СтрРазделить(ПолноеИмяФайла, "\");
	Если МассивЧастейИмени.Количество() > 3 Тогда
		
		Номер = 2;
		Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];
		
		Если Родитель = "Ext" Тогда
			
			Номер = Номер + 1;
			Родитель = МассивЧастейИмени[МассивЧастейИмени.Количество() - Номер];
			
		КонецЕсли;
		
		Возврат Родитель;
		
	Иначе
		
		ВызватьИсключение "Ошибочная структура имени файла: " + ПолноеИмяФайла;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

///////////////////////////////////////////////////////////////////

Функция ПрочитатьПодсистемыКонфигурации(КаталогИсходников) Экспорт
	
	ОписаниеПодсистем = Новый ТаблицаЗначений;
	ОписаниеПодсистем.Колонки.Добавить("ОбъектМетаданных");
	ОписаниеПодсистем.Колонки.Добавить("ПодсистемаИмя");
	ОписаниеПодсистем.Колонки.Добавить("ПодсистемаПредставление");
	ОписаниеПодсистем.Колонки.Добавить("ПодсистемаОписание");
	ОписаниеПодсистем.Колонки.Добавить("Визуальная");
	ОписаниеПодсистем.Колонки.Добавить("Родитель");
	ОписаниеПодсистем.Колонки.Добавить("ПодсистемаПредставлениеКратко");
	ОписаниеПодсистем.Колонки.Добавить("ПодсистемаИмяКратко");
	
	ИмяКаталогаПодсистем = "Subsystem";
	ИерархическийФормат = ЛОЖЬ;
	КаталогПодсистем = ОбъединитьПути(КаталогИсходников, ИмяКаталогаПодсистем);
	ФайлКаталога = Новый Файл(КаталогПодсистем);
	Если Не ФайлКаталога.Существует() Тогда
		
		ИмяКаталогаПодсистем = "Subsystems";
		ИерархическийФормат = ИСТИНА;
		КаталогПодсистем = ОбъединитьПути(КаталогИсходников, ИмяКаталогаПодсистем);
		ФайлКаталога = Новый Файл(КаталогПодсистем);
		
		Если Не ФайлКаталога.Существует() Тогда
			
			Возврат ОписаниеПодсистем;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ФайлыПодсистем = НайтиФайлы(КаталогПодсистем, "*");
	Для Каждого НайденныйФайл Из ФайлыПодсистем Цикл
		
		ПрочитатьПодсистему(НайденныйФайл, ОписаниеПодсистем, ИерархическийФормат, ИмяКаталогаПодсистем, "", "", Неопределено, Неопределено)
		
	КонецЦикла;
	
	Возврат ОписаниеПодсистем;
	
КонецФункции

Процедура ПрочитатьПодсистему(Знач НайденныйФайл, ОписаниеПодсистем, Знач ИерархическийФормат, ИмяКаталогаПодсистем, Знач ПодсистемаИмя, Знач ПодсистемаПредставление, Знач Визуальная, Знач Родитель)
	
	Если НайденныйФайл.ЭтоКаталог() Тогда
		
		Если ИерархическийФормат Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если НайденныйФайл.ИмяБезРасширения = ИмяКаталогаПодсистем Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПолноеИмяФайла = ОбъединитьПути(НайденныйФайл.ПолноеИмя, НайденныйФайл.ИмяБезРасширения + ".xml");
		НайденныйФайл = Новый Файл(ПолноеИмяФайла);
		
	КонецЕсли;
	
	Если НайденныйФайл.Расширение <> ".xml" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодсистемаОписание = "";
	ПодсистемаИмяКратко = "";
	ПодсистемаПредставлениеКратко = "";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя);
	ЭтаПодсистема = Неопределено;
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Properties" Тогда
			
			Пока ЧтениеXML.Прочитать() Цикл
				
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Name" Тогда
					
					ЧтениеXML.Прочитать();
					ПодсистемаИмяКратко = ЧтениеXML.Значение;
					ПодсистемаИмя = ПодсистемаИмя + ?(ПустаяСтрока(ПодсистемаИмя), "", ".") + ПодсистемаИмяКратко;					 
					ЧтениеXML.Пропустить();
					
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Synonym" Тогда
					
					ЧтениеXML.Прочитать();
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // вложенный элемент
						
						Если ЧтениеXML.Имя = "v8:item" Тогда // надо найти элемент с именем v8:content
							
							Пока ЧтениеXML.Имя <> "v8:content" Цикл
								
								ЧтениеXML.Прочитать();
								
							КонецЦикла;
							ЧтениеXML.Прочитать();
							
						Иначе // просто ищем значение
							
							Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
								
								ЧтениеXML.Прочитать();
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ПодсистемаПредставлениеКратко = ЧтениеXML.Значение;
					ПодсистемаПредставление = ПодсистемаПредставление + ?(ПустаяСтрока(ПодсистемаПредставление), "", "/") + ПодсистемаПредставлениеКратко;
					ЧтениеXML.Пропустить();
					
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "IncludeInCommandInterface" Тогда
					
					ЧтениеXML.Прочитать();
					Визуальная = ?(Визуальная = Неопределено, ЧтениеXML.Значение, Мин(Визуальная, ЧтениеXML.Значение));
					ЧтениеXML.Пропустить();
					
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Explanation" Тогда
					
					ЧтениеXML.Прочитать();
					Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // вложенный элемент
						
						Если ЧтениеXML.Имя = "v8:item" Тогда // надо найти элемент с именем v8:content
							
							Пока ЧтениеXML.Имя <> "v8:content" Цикл
								
								ЧтениеXML.Прочитать();
								
							КонецЦикла;
							ЧтениеXML.Прочитать();
							
						Иначе // просто ищем значение
							
							Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
								
								ЧтениеXML.Прочитать();
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ПодсистемаОписание = ЧтениеXML.Значение;
					
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Content" Тогда
					
					Пока ЧтениеXML.Прочитать() Цикл
						
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И СтрЗаканчиваетсяНа(ЧтениеXML.Имя, "Item") Тогда
							
							ЧтениеXML.Прочитать();
							
							ЭтаПодсистема = ОписаниеПодсистем.Добавить();
							ЭтаПодсистема.ПодсистемаИмя = ПодсистемаИмя;
							ЭтаПодсистема.ПодсистемаПредставление = ПодсистемаПредставление;
							ЭтаПодсистема.ПодсистемаИмяКратко = ПодсистемаИмяКратко;
							ЭтаПодсистема.ПодсистемаПредставлениеКратко = ПодсистемаПредставлениеКратко;
							ЭтаПодсистема.ПодсистемаОписание = ПодсистемаОписание;							
							ЭтаПодсистема.ОбъектМетаданных = ЧтениеXML.Значение;
							ЭтаПодсистема.Визуальная = Визуальная;
							ЭтаПодсистема.Родитель = Родитель;
							
							ЧтениеXML.Пропустить();
							
						КонецЕсли;				
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если ЭтаПодсистема = Неопределено Тогда
		
		ЭтаПодсистема = ОписаниеПодсистем.Добавить();
		ЭтаПодсистема.ПодсистемаИмя = ПодсистемаИмя;
		ЭтаПодсистема.ПодсистемаПредставление = ПодсистемаПредставление;
		ЭтаПодсистема.ПодсистемаИмяКратко = ПодсистемаИмяКратко;
		ЭтаПодсистема.ПодсистемаПредставлениеКратко = ПодсистемаПредставлениеКратко;
		ЭтаПодсистема.ПодсистемаОписание = ПодсистемаОписание;							
		ЭтаПодсистема.Визуальная = Визуальная;
		ЭтаПодсистема.Родитель = Родитель;
		
	КонецЕсли;
	
	Если ИерархическийФормат Тогда
		
		КаталогОписанияПодсистемы = ОбъединитьПути(ОбъединитьПути(НайденныйФайл.Путь, НайденныйФайл.ИмяБезРасширения), ИмяКаталогаПодсистем);
		
	Иначе	
		
		КаталогОписанияПодсистемы = ОбъединитьПути(НайденныйФайл.Путь, ИмяКаталогаПодсистем);
		
	КонецЕсли;
	
	ФайлКаталога = Новый Файл(КаталогОписанияПодсистемы);
	Если ФайлКаталога.Существует() Тогда
		
		ФайлыПодсистем = НайтиФайлы(КаталогОписанияПодсистемы, "*");
		Для Каждого НайденныйФайл Из ФайлыПодсистем Цикл
			
			ПрочитатьПодсистему(НайденныйФайл, ОписаниеПодсистем, ИСТИНА, ИмяКаталогаПодсистем, ПодсистемаИмя, ПодсистемаПредставление, Визуальная, ЭтаПодсистема)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьМодуль(Файл)
	
	БлокиМодуля = Новый ТаблицаЗначений;
	БлокиМодуля.Колонки.Добавить("ТипБлока");	
	БлокиМодуля.Колонки.Добавить("НачальнаяСтрока");
	БлокиМодуля.Колонки.Добавить("КонечнаяСтрока");
	БлокиМодуля.Колонки.Добавить("Содержимое");
	БлокиМодуля.Колонки.Добавить("ОписаниеБлока");
	
	КоличествоСтрокМодуля = Файл.КоличествоСтрок();
	
	ТекущийБлок = Неопределено;
	ЭтоКонецБлока = ИСТИНА;
	
	НачальнаяСтрока = 1;
	КонечнаяСтрока = 1;
	
	Для НомерСтроки = 1 По КоличествоСтрокМодуля Цикл
		
		СтрокаМодуля = ВРег(СокрЛП(Файл.ПолучитьСтроку(НомерСтроки)));
		
		Если НЕ ЭтоКонецБлока Тогда 
			
			НовыйБлок = ТекущийБлок;
			Если НовыйБлок = ТипБлоковМодуля.ОписаниеПеременной Тогда 
				
				УдалитьКомментарийИзСтроки(СтрокаМодуля);
				ЭтоКонецБлока = СтрНайти(СтрокаМодуля, ";") > 0;
				
			ИначеЕсли НовыйБлок = ТипБлоковМодуля.ЗаголовокПроцедуры 
				ИЛИ НовыйБлок = ТипБлоковМодуля.ЗаголовокФункции Тогда 
				
				УдалитьКомментарийИзСтроки(СтрокаМодуля);
				ПозицияСкобки = СтрНайти(СтрокаМодуля, ")") > 0;
				ЭтоКонецБлока = ПозицияСкобки > 0;
				
			Иначе 
				
				ЭтоКонецБлока = Истина;
				
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "#ОБЛАСТЬ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "// #ОБЛАСТЬ") Тогда
			
			НовыйБлок = ТипБлоковМодуля.НачалоОбласти;
			ЭтоКонецБлока = Истина;
			
			Если СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
				
				СтрокаМодуля = Сред(СтрокаМодуля, 4);
				
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "#КОНЕЦОБЛАСТИ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "// #КОНЕЦОБЛАСТИ") Тогда
			
			НовыйБлок = ТипБлоковМодуля.КонецОбласти;
			ЭтоКонецБлока = Истина;
			
			Если СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
				
				СтрокаМодуля = Сред(СтрокаМодуля, 4);
				
			КонецЕсли;
			
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
			
			НовыйБлок = ТипБлоковМодуля.Комментарий;
			ЭтоКонецБлока = Истина;
			
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "&") Тогда
			
			НовыйБлок = ТипБлоковМодуля.ДирективаКомпиляции;
			ЭтоКонецБлока = Истина;
			
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПЕРЕМ") Тогда
			
			НовыйБлок = ТипБлоковМодуля.ОписаниеПеременной;
			УдалитьКомментарийИзСтроки(СтрокаМодуля);
			ЭтоКонецБлока = СтрНайти(СтрокаМодуля, ";") > 0;
			
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "ПРОЦЕДУРА") 
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "ФУНКЦИЯ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "FUNCTION") Тогда 
			
			НовыйБлок = ?(СтрНачинаетсяС(СтрокаМодуля, "ПРОЦЕДУРА"), ТипБлоковМодуля.ЗаголовокПроцедуры, ТипБлоковМодуля.ЗаголовокФункции);
			
			УдалитьКомментарийИзСтроки(СтрокаМодуля);
			ПозицияСкобки = СтрНайти(СтрокаМодуля, ")");
			ЭтоКонецБлока = ПозицияСкобки > 0;			
			
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦПРОЦЕДУРЫ") 
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦФУНКЦИИ")
			ИЛИ СтрНачинаетсяС(СтрокаМодуля, "ENDFUNCTION")  Тогда
			
			НовыйБлок = ?(СтрНачинаетсяС(СтрокаМодуля, "КОНЕЦПРОЦЕДУРЫ"), ТипБлоковМодуля.ОкончаниеПроцедуры, ТипБлоковМодуля.ОкончаниеФункции);
			ЭтоКонецБлока = Истина;
			УдалитьКомментарийИзСтроки(СтрокаМодуля);
			
		ИначеЕсли ПустаяСтрока(СтрокаМодуля) И ТекущийБлок <> ТипБлоковМодуля.Операторы Тогда
			
			НовыйБлок = ТипБлоковМодуля.ПустаяСтрока;
			ЭтоКонецБлока = Истина;
			
		Иначе
			
			НовыйБлок = ТипБлоковМодуля.Операторы;
			ЭтоКонецБлока = Истина;
			
		КонецЕсли;
		
		Если НовыйБлок = ТекущийБлок Тогда
			
			КонечнаяСтрока = КонечнаяСтрока + 1;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийБлок) Тогда
				
				НоваяЗаписьОБлоке = БлокиМодуля.Добавить();
				НоваяЗаписьОБлоке.ТипБлока = ТекущийБлок;
				НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
				НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
				НоваяЗаписьОБлоке.ОписаниеБлока = Новый Структура;
				
				Для ИтБлок = НачальнаяСтрока По КонечнаяСтрока Цикл
					
					НоваяЗаписьОБлоке.Содержимое = Строка(НоваяЗаписьОБлоке.Содержимое) 
					+ ?(ПустаяСтрока(НоваяЗаписьОБлоке.Содержимое), "", Символы.ПС) 
					+ Файл.ПолучитьСтроку(ИтБлок);
					
				КонецЦикла;
				
			КонецЕсли;
			
			НачальнаяСтрока = НомерСтроки;
			КонечнаяСтрока  = НомерСтроки;
			ТекущийБлок = НовыйБлок;
			
		КонецЕсли;
		
		Если НомерСтроки = КоличествоСтрокМодуля Тогда
			
			НоваяЗаписьОБлоке = БлокиМодуля.Добавить();
			НоваяЗаписьОБлоке.ТипБлока = ТекущийБлок;
			НоваяЗаписьОБлоке.НачальнаяСтрока = НачальнаяСтрока;
			НоваяЗаписьОБлоке.КонечнаяСтрока  = КонечнаяСтрока;
			НоваяЗаписьОБлоке.ОписаниеБлока = Новый Структура;
			
			Для ИтБлок = НачальнаяСтрока По КонечнаяСтрока Цикл
				
				НоваяЗаписьОБлоке.Содержимое = Строка(НоваяЗаписьОБлоке.Содержимое) 
				+ ?(ПустаяСтрока(НоваяЗаписьОБлоке.Содержимое), "", Символы.ПС) 
				+ Файл.ПолучитьСтроку(ИтБлок);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Содержимое, БлокиМодуля", Файл.ПолучитьТекст(), БлокиМодуля);
	
КонецФункции

Процедура ДополнитьБлокиМодуля(БлокиМодуля, Файл, Модуль)
	
	ОписаниеМодуля = Новый Структура(
	"Глобальный, 	ЕстьНазначениеМодуля, 	Назначение,	Разделы",
	ЛОЖЬ,			ЛОЖЬ,					"",			Новый Массив);
	
	НазначениеМодуляПрошли = ЛОЖЬ;
	РазделОткрыт = ЛОЖЬ;
	ЛокальнаяОбластьОткрыта = ЛОЖЬ;
	МетодОткрыт = ЛОЖЬ;
	
	Области = Новый Массив;
	
	ТекущийРаздел = "";
	ПоследнийБлокКомментария = Неопределено;
	ПоследнийБлокМетода = Неопределено;
	
	БлокиДляУдаления = Новый Массив;
	
	Для Каждого Блок Из БлокиМодуля Цикл
		
		Блок.ОписаниеБлока.Вставить("ЭтоРаздел", ЛОЖЬ);
		Блок.ОписаниеБлока.Вставить("ИмяРаздела", "");
		Блок.ОписаниеБлока.Вставить("ИмяОбласти", "");
		Блок.ОписаниеБлока.Вставить("НазначениеРаздела", "");
		Блок.ОписаниеБлока.Вставить("ИмяМетода", "");
		Блок.ОписаниеБлока.Вставить("ПараметрыМетода", Неопределено);
		Блок.ОписаниеБлока.Вставить("Назначение", "");
		Блок.ОписаниеБлока.Вставить("Экспортный", ЛОЖЬ);
		Блок.ОписаниеБлока.Вставить("ТипВозвращаемогоЗначения", "");
		Блок.ОписаниеБлока.Вставить("ОписаниеВозвращаемогоЗначения", "");
		Блок.ОписаниеБлока.Вставить("Примеры", Новый Массив);		
		Блок.ОписаниеБлока.Вставить("Тело", "");
		
		Если МетодОткрыт Тогда
			
			БлокиДляУдаления.Добавить(Блок);
			
		КонецЕсли;
		
		Если Блок.ТипБлока = ТипБлоковМодуля.ПустаяСтрока Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Блок.ТипБлока <> ТипБлоковМодуля.Комментарий Тогда
			
			// если коммент не первый, значит уже и нет смысла искать описания
			НазначениеМодуляПрошли = ИСТИНА;
			
		КонецЕсли;
		
		Если Блок.ТипБлока = ТипБлоковМодуля.Комментарий Тогда
			
			Если НЕ НазначениеМодуляПрошли Тогда
				
				// первый каммент считаем описанием модуля	
				НазначениеМодуляПрошли = ИСТИНА;
				Назначение = ПолучитьНазначениеБлока(Файл, Блок.НачальнаяСтрока, Блок.КонечнаяСтрока);
				
				Блок.ТипБлока = ТипБлоковМодуля.Описание;
				ОписаниеМодуля.ЕстьНазначениеМодуля = НЕ ПустаяСтрока(Назначение);
				ОписаниеМодуля.Назначение = Назначение;
				
			Иначе
				
				ПоследнийБлокКомментария = Блок;
				
			КонецЕсли; 
			
		ИначеЕсли Блок.ТипБлока = ТипБлоковМодуля.НачалоОбласти Тогда
			
			СтрокаМодуля = СокрЛП(Файл.ПолучитьСтроку(Блок.НачальнаяСтрока));
			ИмяОбласти = СокрЛП(Сред(СтрокаМодуля, СтрДлина("#Область") + 1));
			
			ЭтоРаздел = ЛОЖЬ;
			Если Модуль.ТипМодуля = ТипМодуля.ОбщийМодуль Тогда
				
				ЭтоРаздел = ТипОбласти.РазделыОбщегоМодуля.Найти(ИмяОбласти) <> Неопределено;
				
			ИначеЕсли Модуль.ТипМодуля = ТипМодуля.МодульМенеджера Тогда
				
				ЭтоРаздел = ТипОбласти.РазделыМодуляМенеджера.Найти(ИмяОбласти) <> Неопределено;
				
			КонецЕсли;
			
			Если ЭтоРаздел И (РазделОткрыт ИЛИ ЛокальнаяОбластьОткрыта ИЛИ МетодОткрыт) Тогда
				
				// кривая структура модуля
				ЭтоРаздел = ЛОЖЬ;
				
			КонецЕсли;
			
			ТекущаяОбласть = "";
			Если Области.Количество() Тогда
				
				ТекущаяОбласть = Области[Области.ВГраница()];
				
			КонецЕсли;
			
			Блок.ОписаниеБлока.Вставить("ЭтоРаздел", ЭтоРаздел);
			Блок.ОписаниеБлока.Вставить("ИмяРаздела", ТекущийРаздел);
			Блок.ОписаниеБлока.Вставить("ИмяОбласти", ТекущаяОбласть);
			Блок.ОписаниеБлока.Вставить("НазначениеРаздела", "");
			
			Если ЭтоРаздел Тогда
				
				РазделОткрыт = ИСТИНА;
				ТекущийРаздел = ИмяОбласти;
				
				ОписаниеМодуля.Разделы.Добавить(ТекущийРаздел);
				
				// заполним описание раздела
				Если ПоследнийБлокКомментария <> Неопределено Тогда
					
					Назначение = ПолучитьНазначениеБлока(Файл, ПоследнийБлокКомментария.НачальнаяСтрока, ПоследнийБлокКомментария.КонечнаяСтрока, ИмяОбласти);
					Блок.ОписаниеБлока.Вставить("НазначениеРаздела", Назначение);
					Если НЕ ПустаяСтрока(Назначение) Тогда
						
						ПоследнийБлокКомментария.ТипБлока = ТипБлоковМодуля.Описание;
						
					КонецЕсли;							
					
					ПоследнийБлокКомментария = Неопределено;
					
				КонецЕсли;
				
			Иначе
				
				ЛокальнаяОбластьОткрыта = ИСТИНА;
				Области.Добавить(ИмяОбласти);				
				
			КонецЕсли;
			
		ИначеЕсли Блок.ТипБлока = ТипБлоковМодуля.КонецОбласти Тогда
			
			ПоследнийБлокКомментария = Неопределено;
			
			Если ЛокальнаяОбластьОткрыта Тогда 
				
				Области.Удалить(Области.ВГраница());
				ЛокальнаяОбластьОткрыта = Области.Количество();
				
			ИначеЕсли РазделОткрыт Тогда
				
				РазделОткрыт = ЛОЖЬ;
				ТекущийРаздел = "";
				
			Иначе
				
				// ошибка, пока не обрабатываю
				
			КонецЕсли;
			
		ИначеЕсли Блок.ТипБлока = ТипБлоковМодуля.ЗаголовокПроцедуры
			ИЛИ Блок.ТипБлока = ТипБлоковМодуля.ЗаголовокФункции Тогда
			
			Блок.ОписаниеБлока.Вставить("ИмяРаздела", ТекущийРаздел);
			Если Области.Количество() Тогда
				
				Блок.ОписаниеБлока.Вставить("ИмяОбласти", Области[Области.ВГраница()]);
				
			Иначе
				
				Блок.ОписаниеБлока.Вставить("ИмяОбласти", "");
				
			КонецЕсли;
			
			МетодОткрыт = ИСТИНА;
			ПоследнийБлокМетода = Блок;
			
			// получим имя метода
			Заголовок = СтрЗаменить(Блок.Содержимое, Символы.ПС, " ");
			Заголовок = СокрЛП(СтрЗаменить(Заголовок, Символы.Таб, " "));
			Если Блок.ТипБлока = ТипБлоковМодуля.ЗаголовокПроцедуры Тогда
				
				Заголовок = СокрЛП(Сред(Заголовок, СтрДлина("Процедура") + 1))
				
			Иначе	
				
				Если СтрНачинаетсяС("Заголовок", "Функция") Тогда
					
					Заголовок = СокрЛП(Сред(Заголовок, СтрДлина("Функция") + 1))
					
				Иначе
					
					Заголовок = СокрЛП(Сред(Заголовок, СтрДлина("Function") + 1))
					
				КонецЕсли;
				
			КонецЕсли;
			
			// получим параметры метода
			ПозицияСкобки = СтрНайти(Заголовок, "(");
			ИмяМетода = Лев(Заголовок, ПозицияСкобки - 1);
			СтрокаПараметров = СокрЛП(Сред(Заголовок, ПозицияСкобки + 1));
			ПозицияСкобки = СтрНайти(СтрокаПараметров, ")", НаправлениеПоиска.СКонца);
			СтрокаПараметров = СокрЛП(Лев(СтрокаПараметров, ПозицияСкобки - 1));
			Заголовок = СокрЛП(Сред(Заголовок, СтрНайти(Заголовок, ")", НаправлениеПоиска.СКонца) + 1));
			Блок.ОписаниеБлока.Вставить("ИмяМетода", ИмяМетода);
			Блок.ОписаниеБлока.Вставить("ПараметрыМетода", ПолучитьПараметрыМетода(СтрокаПараметров));
			Блок.ОписаниеБлока.Вставить("Назначение", "");
			Блок.ОписаниеБлока.Вставить("Экспортный", СтрЗаканчиваетсяНа(ВРег(Заголовок), "ЭКСПОРТ"));
			Блок.ОписаниеБлока.Вставить("ТипВозвращаемогоЗначения", "");
			Блок.ОписаниеБлока.Вставить("ОписаниеВозвращаемогоЗначения", "");
			Блок.ОписаниеБлока.Вставить("Примеры", Новый Массив);
			
			// получим описание метода
			Если ПоследнийБлокКомментария <> Неопределено Тогда
				
				СтрокаКомментария = Файл.ПолучитьСтроку(ПоследнийБлокКомментария.НачальнаяСтрока);
				СтрокаКомментария = СокрЛП(Сред(СтрокаКомментария, 3));
				Если СтрокаКомментария = ИмяМетода Тогда
					
					ПоследнийБлокКомментария.ТипБлока = ТипБлоковМодуля.Описание;
					Назначение = "";
					НомерСтрокиПараметры = Неопределено;
					НомерСтрокиВозвращаемоеЗначение = Неопределено;
					НомерСтрокиПример = Неопределено;
					НомерСтроки = Неопределено;
					Для Ит = ПоследнийБлокКомментария.НачальнаяСтрока + 1 По ПоследнийБлокКомментария.КонечнаяСтрока Цикл
						
						СтрокаКомментария = Файл.ПолучитьСтроку(Ит);
						СтрокаКомментария = СокрЛП(Сред(СтрокаКомментария, 3));
						Если СтрНачинаетсяС(СтрокаКомментария, "Параметры:") Тогда
							
							НомерСтрокиПараметры = Ит;
							Прервать;
							
						ИначеЕсли СтрНачинаетсяС(СтрокаКомментария, "Возвращаемое значение:") Тогда
							
							НомерСтрокиВозвращаемоеЗначение = Ит;
							Прервать;
							
						ИначеЕсли СтрНачинаетсяС(СтрокаКомментария, "Пример") Тогда
							
							НомерСтрокиПример = Ит;
							Прервать;
							
						Иначе
							
							Назначение = Назначение + ?(ПустаяСтрока(Назначение), "", Символы.ПС) + СтрокаКомментария;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НомерСтрокиПараметры <> Неопределено Тогда
						
						ИмяПараметра = Неопределено;
						ОписаниеПараметра = "";
						ТипПараметра = "";
						Для Ит = НомерСтрокиПараметры + 1 По ПоследнийБлокКомментария.КонечнаяСтрока Цикл
							
							СтрокаКомментария = Файл.ПолучитьСтроку(Ит);
							СтрокаКомментария = СокрЛП(Сред(СтрокаКомментария, 3));
							Если СтрНачинаетсяС(СтрокаКомментария, "Возвращаемое значение:") Тогда
								
								НомерСтрокиВозвращаемоеЗначение = Ит;
								Прервать;
								
							ИначеЕсли СтрНачинаетсяС(СтрокаКомментария, "Пример") Тогда
								
								НомерСтрокиПример = Ит;
								Прервать;
								
							Иначе
								
								// шаблон параметра 
								// 'Имя' - 'Тип' - 'Описаание'
								// 'продолжение описания'
								
								СоставСтрокиКомментария = СтрРазделить(СтрокаКомментария, "-");
								Если СоставСтрокиКомментария.Количество() >= 3 Тогда 
									
									Если ИмяПараметра <> Неопределено Тогда
										
										СтрокаПараметраМетода = Блок.ОписаниеБлока.ПараметрыМетода.Найти(ИмяПараметра, "Имя");
										Если СтрокаПараметраМетода <> Неопределено Тогда
											
											СтрокаПараметраМетода.ТипПараметра = ТипПараметра;
											СтрокаПараметраМетода.ОписаниеПараметра = ОписаниеПараметра;
											
										КонецЕсли;
										
									КонецЕсли;
									
									// это описание параметра
									ИмяПараметра = СокрЛП(СоставСтрокиКомментария[0]);
									ТипПараметра = СокрЛП(СоставСтрокиКомментария[1]);
									
									ПозицияДефис = СтрНайти(СтрокаКомментария, "-");
									ПозицияДефис = СтрНайти(СтрокаКомментария, "-",, ПозицияДефис + 1);
									ОписаниеПараметра = СокрЛП(Сред(СтрокаКомментария, ПозицияДефис + 1));
									
								Иначе
									
									// продолжение описания параметра либо косячное описание
									ОписаниеПараметра = ОписаниеПараметра + ?(ПустаяСтрока(ОписаниеПараметра), "", Символы.ПС) + СтрокаКомментария; 
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если ИмяПараметра <> Неопределено Тогда
							
							СтрокаПараметраМетода = Блок.ОписаниеБлока.ПараметрыМетода.Найти(ИмяПараметра, "Имя");
							Если СтрокаПараметраМетода <> Неопределено Тогда
								
								СтрокаПараметраМетода.ТипПараметра = ТипПараметра;
								СтрокаПараметраМетода.ОписаниеПараметра = ОписаниеПараметра;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НомерСтрокиВозвращаемоеЗначение <> Неопределено Тогда
						
						ОписаниеПараметра = "";
						ТипПараметра = "";
						Для Ит = НомерСтрокиВозвращаемоеЗначение + 1 По ПоследнийБлокКомментария.КонечнаяСтрока Цикл
							
							СтрокаКомментария = Файл.ПолучитьСтроку(Ит);
							СтрокаКомментария = СокрЛП(Сред(СтрокаКомментария, 3));
							
							Если СтрНачинаетсяС(СтрокаКомментария, "Пример") Тогда
								
								НомерСтрокиПример = Ит;
								Прервать;
								
							Иначе
								
								// шаблон параметра 
								// 'Тип' - 'Описаание'
								// 'продолжение описания'
								
								СоставСтрокиКомментария = СтрРазделить(СтрокаКомментария, "-");
								Если ТипПараметра = "" И СоставСтрокиКомментария.Количество() >= 2 Тогда 
									
									// это описание параметра
									ТипПараметра = СокрЛП(СоставСтрокиКомментария[0]);
									
									ПозицияДефис = СтрНайти(СтрокаКомментария, "-");
									ОписаниеПараметра = СокрЛП(Сред(СтрокаКомментария, ПозицияДефис + 1));
									
								Иначе
									
									// продолжение описания параметра либо косячное описание
									ОписаниеПараметра = ОписаниеПараметра + ?(ПустаяСтрока(ОписаниеПараметра), "", Символы.ПС) + СтрокаКомментария; 
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если ТипПараметра <> "" Тогда
							
							Блок.ОписаниеБлока.Вставить("ТипВозвращаемогоЗначения", ТипПараметра);
							Блок.ОписаниеБлока.Вставить("ОписаниеВозвращаемогоЗначения", ОписаниеПараметра);						
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НомерСтрокиПример <> Неопределено Тогда
						
						Примеры = Новый Массив;
						СтрокаПример = "";
						Для Ит = НомерСтрокиПример + 1 По ПоследнийБлокКомментария.КонечнаяСтрока Цикл
							
							СтрокаКомментария = Файл.ПолучитьСтроку(Ит);
							СтрокаКомментария = СокрЛП(Сред(СтрокаКомментария, 3));
							
							Если СтрНачинаетсяС(СтрокаКомментария, "Пример") Тогда
								
								Примеры.Добавить(СтрокаПример);
								СтрокаПример = "";
								Продолжить;
								
							ИначеЕсли Не ПустаяСтрока(СтрокаКомментария) Тогда  
								
								СтрокаПример = СтрокаПример + ?(ПустаяСтрока(СтрокаПример), "", Символы.ПС)
								+ СтрокаКомментария; 
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если СтрокаПример <> "" Тогда
							
							Примеры.Добавить(СтрокаПример);
							
						КонецЕсли;
						
						Если Примеры.Количество() Тогда
							
							Блок.ОписаниеБлока.Вставить("Примеры", Примеры);												
							
						КонецЕсли;
						
					КонецЕсли;
					
					Блок.ОписаниеБлока.Вставить("Назначение", Назначение);
					
				Иначе
					
					// кривое описание либо ХЗ что это				
					
				КонецЕсли;
				
				ПоследнийБлокКомментария = Неопределено;
				
			КонецЕсли;
			
		ИначеЕсли Блок.ТипБлока = ТипБлоковМодуля.ОкончаниеПроцедуры
			ИЛИ Блок.ТипБлока = ТипБлоковМодуля.ОкончаниеФункции Тогда
			
			МетодОткрыт = ЛОЖЬ;
			ПоследнийБлокКомментария = Неопределено;
			
			СодержимоеМетода = "";
			Для Ит = ПоследнийБлокМетода.КонечнаяСтрока + 1 По Блок.НачальнаяСтрока - 1 Цикл
				
				СтрокаМодуля = Файл.ПолучитьСтроку(Ит);
				СодержимоеМетода = СодержимоеМетода + ?(ПустаяСтрока(СодержимоеМетода), "", Символы.ПС) + СтрокаМодуля;
				
			КонецЦикла;
			
			ПоследнийБлокМетода.ОписаниеБлока.Тело = СодержимоеМетода;
			ПоследнийБлокМетода = Неопределено;
			
		Иначе
			
			// забываем последний каммент-блок
			ПоследнийБлокКомментария = Неопределено;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	КоличествоБлоков = БлокиМодуля.Количество() - 1; 
	Для Ит = 0 По КоличествоБлоков Цикл
		
		Блок = БлокиМодуля[КоличествоБлоков - Ит];
		Если Блок.ТипБлока = ТипБлоковМодуля.ОкончаниеПроцедуры
			ИЛИ Блок.ТипБлока = ТипБлоковМодуля.ОкончаниеФункции
			ИЛИ Блок.ТипБлока = ТипБлоковМодуля.КонецОбласти
			ИЛИ Блок.ТипБлока = ТипБлоковМодуля.Описание
			ИЛИ Блок.ТипБлока = ТипБлоковМодуля.ПустаяСтрока Тогда
			
			БлокиМодуля.Удалить(Блок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модуль.ОписаниеМодуля = ОписаниеМодуля;
	
КонецПроцедуры

Процедура УдалитьКомментарийИзСтроки(СтрокаМодуля)
	
	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	Если ПозицияКомментария > 0 Тогда
		
		СтрокаМодуля = СокрП(Лев(СтрокаМодуля, ПозицияКомментария - 1));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНазначениеБлока(Файл, Знач НачальнаяСтрока, Знач КонечнаяСтрока, ИмяБлока = "")
	
	Назначение = "";
	Если НачальнаяСтрока + 1 < КонечнаяСтрока Тогда
		
		СтрокаМодуляНач = СокрЛП(Файл.ПолучитьСтроку(НачальнаяСтрока));
		СтрокаМодуляКон = СокрЛП(Файл.ПолучитьСтроку(КонечнаяСтрока));
		Если СтрНачинаетсяС(СтрокаМодуляНач, "////") 
			И СтрНачинаетсяС(СтрокаМодуляКон, "////") Тогда // да, это описание
			
			Если Не ПустаяСтрока(ИмяБлока) Тогда
				
				СтрокаМодуля2 = СокрЛП(Файл.ПолучитьСтроку(НачальнаяСтрока + 1));
				Если СтрНачинаетсяС(СтрокаМодуля2, "// " + ИмяБлока) Тогда
					
					НачальнаяСтрока = НачальнаяСтрока + 1;
					
				Иначе
					
					// имени блока нет, пропускаем
					НачальнаяСтрока = КонечнаяСтрока;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Для Ит = НачальнаяСтрока + 1 По КонечнаяСтрока - 1 Цикл
				
				СтрокаМодуля = СокрЛП(Сред(Файл.ПолучитьСтроку(Ит), 3));
				Назначение = Назначение + ?(ПустаяСтрока(Назначение), "", Символы.ПС) + СтрокаМодуля;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Назначение;
	
КонецФункции

Функция ПолучитьПараметрыМетода(СтрокаПараметров)
	
	ПараметрыМетода = Новый ТаблицаЗначений;
	ПараметрыМетода.Колонки.Добавить("Имя");
	ПараметрыМетода.Колонки.Добавить("Знач");
	ПараметрыМетода.Колонки.Добавить("ЗначениеПоУмолчанию");
	ПараметрыМетода.Колонки.Добавить("ТипПараметра");
	ПараметрыМетода.Колонки.Добавить("ОписаниеПараметра");
	
	ДлинаСтроки = СтрДлина(СтрокаПараметров);
	
	Пока Истина Цикл
		
		Если ПустаяСтрока(СтрокаПараметров) Тогда
			
			Прервать;
			
		КонецЕсли;
		
		СтрокаПараметров = СокрЛП(СтрокаПараметров);
		ПараметрМетода = ПараметрыМетода.Добавить();
		ЗаполнитьЗначенияСвойств(ПараметрМетода, Новый Структура("ЗНАЧ, Имя, ЗначениеПоУмолчанию, ТипПараметра, ОписаниеПараметра", ЛОЖЬ, "", Неопределено, "", ""));
		
		// отделим ЗНАЧ
		Если СтрНачинаетсяС(ВРег(СтрокаПараметров), "ЗНАЧ ") Тогда
			
			ПараметрМетода.ЗНАЧ = ИСТИНА;
			СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, 5)); 
			
		КонецЕсли;
		
		// отделим имя
		ПозицияРавно = СтрНайти(СтрокаПараметров, "=");
		ПозицияЗапятая = СтрНайти(СтрокаПараметров, ",");
		
		Если ПозицияЗапятая + ПозицияРавно = 0 Тогда
			
			//  вся строка параметр
			ПараметрМетода.Имя = СокрЛП(СтрокаПараметров);
			СтрокаПараметров = "";
			
		ИначеЕсли ПозицияРавно = 0 ИЛИ ПозицияРавно > ПозицияЗапятая И ПозицияЗапятая > 0 Тогда        
			
			// значения по умолчанию нет        
			ПараметрМетода.Имя = СокрЛП(Лев(СтрокаПараметров, ПозицияЗапятая - 1));
			СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияЗапятая + 1));
			
		Иначе // есть значение по умолчанию
			
			ПараметрМетода.Имя = СокрЛП(Лев(СтрокаПараметров, ПозицияРавно - 1));
			СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияРавно + 1));
			ПозицияЗапятая = СтрНайти(СтрокаПараметров, ",");
			Если ПозицияЗапятая = 0 Тогда 
				
				// до конца строки - это значение по умолчанию
				ПараметрМетода.ЗначениеПоУмолчанию = СтрокаПараметров;
				СтрокаПараметров = "";
				
			Иначе
				
				// надо отделить значение по умолчанию от следующего параметра
				// варианты значения - число, строка, булево, Неопределено  
				ПозицияКавычки = СтрНайти(СтрокаПараметров, """");
				Если ПозицияКавычки = 0 ИЛИ ПозицияКавычки > ПозицияЗапятая Тогда
					
					// текущее значение по умолчанию не строковое
					ПараметрМетода.ЗначениеПоУмолчанию = СокрЛП(Лев(СтрокаПараметров, ПозицияЗапятая - 1));
					СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияЗапятая + 1));
					
				Иначе
					
					ЗначениеПараметра = "";
					КавычкаОткрыта = ИСТИНА;
					Пока Истина Цикл                    
						
						ПозицияКавычки = СтрНайти(СтрокаПараметров, """",, 2);
						КавычкаОткрыта = НЕ КавычкаОткрыта;
						ЗначениеПараметра = ЗначениеПараметра + Лев(СтрокаПараметров, ПозицияКавычки);     
						СтрокаПараметров = Сред(СтрокаПараметров, ПозицияКавычки + 1);
						
						Если ПустаяСтрока(СтрокаПараметров) Тогда
							
							Прервать;
							
						Иначе
							
							ПозицияЗапятая = СтрНайти(СтрокаПараметров, ",");
							ПозицияКавычки = СтрНайти(СтрокаПараметров, """",, 2);
							
							Если ПозицияКавычки = 0 ИЛИ ПозицияКавычки > ПозицияЗапятая ИЛИ НЕ КавычкаОткрыта Тогда
								
								
								ЗначениеПараметра = СокрЛП(ЗначениеПараметра + Лев(СтрокаПараметров, ПозицияЗапятая - 1));
								СтрокаПараметров = СокрЛП(Сред(СтрокаПараметров, ПозицияЗапятая + 1));
								Прервать;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла; 
					
					ПараметрМетода.ЗначениеПоУмолчанию = ЗначениеПараметра;
					
				КонецЕсли;
				
			КонецЕсли;               
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыМетода;
	
КонецФункции
