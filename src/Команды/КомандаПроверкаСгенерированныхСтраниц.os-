///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды <autodoc-check>
//
///////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	// Создание описания команды
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Проверяет наличие страниц в confluence и соответствующих им модулей конфигурации");

	// Добавление параметров команды
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ЛокальныйКаталогГит", "Файловый путь к локальному репозиторию GIT.");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-delete", "Удаление ненужных страниц");
	
	// Добавление команды парсеру
	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры (необязательно) - Соответствие - дополнительные параметры
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	КаталогРепозитория = ci41cОбщегоНазначения.КаталогРепозитория(ПараметрыКоманды, ДополнительныеПараметры);
	Если КаталогРепозитория = Неопределено Тогда
	
		Возврат МенеджерКомандПриложения.РезультатыКоманд().НеверныеПараметры;

	КонецЕсли;

	НастройкиСтенда = ci41cОбщегоНазначения.ПрочитатьНастройкиСтенда(КаталогРепозитория, ДополнительныеПараметры);
	Если НастройкиСтенда = Неопределено Тогда

		Возврат МенеджерКомандПриложения.РезультатыКоманд().НеверныеПараметры;

	КонецЕсли;

	Если НастройкиСтенда.Настройка("АвтоДокументирование\Выполнять") <> ИСТИНА Тогда

		ДополнительныеПараметры.Лог.Информация("Автодокументирование не используется");
		Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

	КонецЕсли;

	Пространство = НастройкиСтенда.Настройка("АвтоДокументирование\КодПространстваConfluence");
	Если НЕ ЗначениеЗаполнено(Пространство) Тогда

		ДополнительныеПараметры.Лог.Ошибка("Анализ документации невозможен, т.к. не указан код пространства confluence");
		Возврат МенеджерКомандПриложения.РезультатыКоманд().ОшибкаВремениВыполнения;

	КонецЕсли;

	Генератор = Новый ГенераторДокументации();

	КомандаGit = Новый КомандныйФайл();
	КомандаGit.ДобавитьКоманду(СтрШаблон("cd /d ""%1""", КаталогРепозитория));	
	КомандаGit.ДобавитьКоманду("git pull origin");

	КодВозврата = КомандаGit.Исполнить();
	ВыводКоманды = КомандаGit.ПолучитьВывод();

	Если КодВозврата <> 0 Тогда

		ДополнительныеПараметры.Лог.Ошибка("git вернул код ошибки %1%2Вывод%3", КодВозврата, Символы.ПС, ВыводКоманды);
		Возврат МенеджерКомандПриложения.РезультатыКоманд().ОшибкаВремениВыполнения;

	КонецЕсли;
	
	КаталогИсходников = ОбъединитьПути(КаталогРепозитория, НастройкиСтенда.Настройка("КаталогИсходныхФайлов"));

	ОписаниеКонфигурации = Генератор.ПолучитьПарсерКонфигурации().ПрочитатьДеревоКонфигурации(КаталогИсходников);
	ОписаниеКонфигурации = Генератор.ПолучитьПарсерКонфигурации().ПрочитатьМодулиКонфигурации(КаталогИсходников, ОписаниеКонфигурации);
	
	СоздаваемыеСтраницы = Новый ТаблицаЗначений;
	СоздаваемыеСтраницы.Колонки.Добавить("ИмяСтраницы");
	СоздаваемыеСтраницы.Колонки.Добавить("Родитель");
	СоздаваемыеСтраницы.Колонки.Добавить("Идентификатор");

	СоздаваемыеРазделы = СоздаваемыеСтраницы.Скопировать();
	СоздаваемыеПодсистемы = СоздаваемыеСтраницы.Скопировать();
	
	УдаляемыеСтраницы = Новый ТаблицаЗначений;
	УдаляемыеСтраницы.Колонки.Добавить("ИмяСтраницы");
	УдаляемыеСтраницы.Колонки.Добавить("Идентификатор");

	ОшибкиОбновленияСтраниц = "";

	Для Каждого Модуль Из ОписаниеКонфигурации.МодулиКонфигурации Цикл

		Генератор.ПолучитьПарсерКонфигурации().ПрочитатьСодержимоеМодуля(Модуль);
	
		ТекстОшибок = "";
		СодержимоеСтраницы = Генератор.СформироватьТекстСтраницыПоОписанию(Модуль, ТекстОшибок, Генератор.ЗагрузитьШаблоны(НастройкиСтенда, ЛОЖЬ));

		Если НЕ ПустаяСтрока(ТекстОшибок) ИЛИ ПустаяСтрока(СодержимоеСтраницы) Тогда

			// Нет никто
			Продолжить;

		Иначе
				
			ИмяСтраницы = Генератор.ПолучитьПарсерКонфигурации().ПолноеИмяОбъекта(Модуль, ЛОЖЬ);
		
			СтруктураПодсистем = Генератор.ПолучитьСтруктуруПодсистем(Модуль.Родитель.Подсистемы);
			Если ПустаяСтрока(СтруктураПодсистем.ИмяРаздела) Тогда

				Продолжить;

			КонецЕсли;

			Раздел = СоздаваемыеРазделы.Найти(СтруктураПодсистем.ИмяРаздела, "ИмяСтраницы");
			Если Раздел = Неопределено Тогда

				Раздел = СоздаваемыеРазделы.Добавить();
				Раздел.ИмяСтраницы = СтруктураПодсистем.ИмяРаздела;
		
			КонецЕсли;
	
			ИмяПодсистемыБСП = "Подсистема " + СтруктураПодсистем.ИмяПодсистемы;
			Если СтруктураПодсистем.ИмяПодсистемы = "Общего назначения" Тогда
					
				ИмяПодсистемыБСП = ИмяПодсистемыБСП + " (" + НРег(СтруктураПодсистем.ИмяРаздела) + ")";

			КонецЕсли;

			Подсистема = СоздаваемыеПодсистемы.Найти(ИмяПодсистемыБСП, "ИмяСтраницы");
			Если Подсистема = Неопределено Тогда

				Подсистема = СоздаваемыеПодсистемы.Добавить();
				Подсистема.ИмяСтраницы = ИмяПодсистемыБСП;
				Подсистема.Родитель = Раздел;

			КонецЕсли; 

			Страница = СоздаваемыеСтраницы.Добавить();
			Страница.ИмяСтраницы = "Программный интерфейс: " + ИмяСтраницы;
			Страница.Родитель = Подсистема;			

		КонецЕсли;

	КонецЦикла;

	ПодключениеConfluence = Генератор.СоздатьПодключениеConfluence();
	ИдентификаторСтраницы = Confluence.НайтиСтраницуПоИмени(ПодключениеConfluence, Пространство, "Состав подсистем");
	Если ПустаяСтрока(ИдентификаторСтраницы) Тогда

		ОшибкиОбновленияСтраниц = ОшибкиОбновленияСтраниц + ?(ПустаяСтрока(ОшибкиОбновленияСтраниц), "", Символы.ПС) + 
			"В пространстве отсутствует корневая страница документации 'Состав подсистем'";

	Иначе

		ДочерниеСтраницы = Confluence.ПодчиненныеСтраницыПоИдентификатору(ПодключениеConfluence, ИдентификаторСтраницы);
		Для Каждого ИмеющийсяРаздел Из ДочерниеСтраницы Цикл

			НайденныйРаздел = СоздаваемыеРазделы.Найти(ИмеющийсяРаздел.Наименование, "ИмяСтраницы");
			Если НайденныйРаздел = Неопределено Тогда

				ОшибкиОбновленияСтраниц = ОшибкиОбновленияСтраниц + ?(ПустаяСтрока(ОшибкиОбновленияСтраниц), "", Символы.ПС) 
					+ "Нужно удалить раздел '" + ИмеющийсяРаздел.Наименование + "' (" + ИмеющийсяРаздел.Идентификатор + ") и все подчиненные";
				
				УдаляемаяСтраница = УдаляемыеСтраницы.Добавить();
				УдаляемаяСтраница.ИмяСтраницы = ИмеющийсяРаздел.Наименование;
				УдаляемаяСтраница.Идентификатор = ИмеющийсяРаздел.Идентификатор;

			Иначе

				ДочерниеСтраницыРаздела = Confluence.ПодчиненныеСтраницыПоИдентификатору(
											ПодключениеConfluence, 
											Confluence.НайтиСтраницуПоИмени(ПодключениеConfluence, Пространство, ИмеющийсяРаздел.Наименование));
				Для Каждого ИмеющаясяПодсистема Из ДочерниеСтраницыРаздела Цикл
					
					УдалитьПодсистему = ЛОЖЬ;
					ДочерниеСтраницыПодсистемы = Неопределено;
					НайденныеПодсистемыРаздела = СоздаваемыеПодсистемы.НайтиСтроки(Новый Структура("Родитель, ИмяСтраницы", НайденныйРаздел, ИмеющаясяПодсистема.Наименование));
					Если НайденныеПодсистемыРаздела.Количество() <> 1 Тогда

						ДочерниеСтраницыПодсистемы = Confluence.ПодчиненныеСтраницыПоИдентификатору(
														ПодключениеConfluence, 
														Confluence.НайтиСтраницуПоИмени(ПодключениеConfluence, Пространство, ИмеющаясяПодсистема.Наименование));
						
						УдалитьПодсистему = ИСТИНА;
						Для Каждого ИмеющаясяСтраница Из ДочерниеСтраницыПодсистемы Цикл

							Если СтрНайти(ИмеющаясяСтраница.Наименование, "Программный интерфейс:") = 0 Тогда

								УдалитьПодсистему = ЛОЖЬ;
								Прервать;

							КонецЕсли;
							
						КонецЦикла;

						Если УдалитьПодсистему Тогда
							
							ОшибкиОбновленияСтраниц = ОшибкиОбновленияСтраниц + ?(ПустаяСтрока(ОшибкиОбновленияСтраниц), "", Символы.ПС) 
								+ "Нужно удалить подсистему '" + ИмеющаясяПодсистема.Наименование + "' (" + ИмеющаясяПодсистема.Идентификатор + ") и все подчиненные";

							УдаляемаяСтраница = УдаляемыеСтраницы.Добавить();
							УдаляемаяСтраница.ИмяСтраницы = ИмеющаясяПодсистема.Наименование;
							УдаляемаяСтраница.Идентификатор = ИмеющаясяПодсистема.Идентификатор;

						КонецЕсли;					

					КонецЕсли;	

					Если НЕ УдалитьПодсистему Тогда

						Если ДочерниеСтраницыПодсистемы = Неопределено Тогда
						
							ДочерниеСтраницыПодсистемы = Confluence.ПодчиненныеСтраницыПоИдентификатору(
														ПодключениеConfluence, 
														Confluence.НайтиСтраницуПоИмени(ПодключениеConfluence, Пространство, ИмеющаясяПодсистема.Наименование));
						КонецЕсли;

						Для Каждого ИмеющаясяСтраница Из ДочерниеСтраницыПодсистемы Цикл
							
							Если НайденныеПодсистемыРаздела.Количество() Тогда
								
								НайденныеСтраницыПодсистемы = СоздаваемыеСтраницы.НайтиСтроки(Новый Структура("Родитель, ИмяСтраницы", НайденныеПодсистемыРаздела[0], ИмеющаясяСтраница.Наименование));
								
							Иначе
							
								НайденныеСтраницыПодсистемы = Новый Массив;
								
							КонецЕсли;
								
							Если НайденныеСтраницыПодсистемы.Количество() <> 1 Тогда

								Если СтрНайти(ИмеющаясяСтраница.Наименование, "Программный интерфейс:") > 0 Тогда

									ОшибкиОбновленияСтраниц = ОшибкиОбновленияСтраниц + ?(ПустаяСтрока(ОшибкиОбновленияСтраниц), "", Символы.ПС)
										+ "Нужно удалить страницу '" + ИмеющаясяСтраница.Наименование + "' (" + ИмеющаясяСтраница.Идентификатор + ")";
								
									УдаляемаяСтраница = УдаляемыеСтраницы.Добавить();
									УдаляемаяСтраница.ИмяСтраницы = ИмеющаясяСтраница.Наименование;
									УдаляемаяСтраница.Идентификатор = ИмеющаясяСтраница.Идентификатор;

								КонецЕсли;

							КонецЕсли;

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если Не ПустаяСтрока(ОшибкиОбновленияСтраниц) Тогда

		Если ПараметрыКоманды["-delete"] Тогда
		
			ОшибкиОбновленияСтраниц = "";	
		
			Для Каждого Страница Из УдаляемыеСтраницы Цикл

				Попытка
					
					Confluence.УдалитьСтраницу(ПодключениеConfluence, Пространство, Страница.ИмяСтраницы, Страница.Идентификатор, ИСТИНА);
					ДополнительныеПараметры.Лог.Информация("Удалена страница '" + Страница.ИмяСтраницы + "' (" + Страница.Идентификатор + ") и подчиненные (при наличии)");
				
				Исключение
				
					ОшибкиОбновленияСтраниц = ОшибкиОбновленияСтраниц + ?(ПустаяСтрока(ОшибкиОбновленияСтраниц), "", Символы.ПС)
						+ "Ошибка удаления страницы '" + Страница.ИмяСтраницы + "' (" + Страница.Идентификатор + "): " + ОписаниеОшибки();

				КонецПопытки;

			КонецЦикла;

		КонецЕсли;	

	КонецЕсли;

	// При успешном выполнении возвращает код успеха
	Если ПустаяСтрока(ОшибкиОбновленияСтраниц) Тогда

		Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

	Иначе

		ДополнительныеПараметры.Лог.Ошибка("Имеются ненужные страницы: " + Символы.ПС + ОшибкиОбновленияСтраниц);
		Возврат МенеджерКомандПриложения.РезультатыКоманд().ОшибкаВремениВыполнения;

	КонецЕсли;
	
КонецФункции // ВыполнитьКоманду
