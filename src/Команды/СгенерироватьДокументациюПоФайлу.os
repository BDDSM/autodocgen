//////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

// Возвращает имя команды приложения
Функция ИмяКоманды() Экспорт
	
	Возврат "alone";
	
КонецФункции // ИмяКоманды

// Возвращает описание исполняемой команды
Функция ОписаниеКоманды() Экспорт
	
	Возврат "Выполняет генерацию документации указанного файла";
	
КонецФункции // ОписаниеКоманды

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт

	// Добавление параметров команды
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИсходныйФайл", "Исходный файл, для которого необходимо сгенерировать документацию");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-format", "Формат генерации документации. Поддерживается ТОЛЬКО html.");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-config", "Путь к конфигурационному файлу. По умолчанию ищет в каталоге с исходным файлом");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-errno", "Выполняет публикацию документации даже при наличии ошибок");
	
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	НастройкиГенератора = Новый Структура;
	ПараметрыКоманды["-format"] = "html";

	ИсходныйФайл = ПараметрыКоманды["ИсходныйФайл"];
	Если НЕ ЗначениеЗаполнено(ИсходныйФайл) Тогда
		
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не указан каталог исходных файлов");
		Возврат Неопределено;
		
	Иначе
		
		Файл = Новый Файл(ИсходныйФайл);
		Если Не Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
			
			Приложение.ЗавершитьРаботуПриложенияСОшибкой(СтрШаблон("Исходный файл '%1' не существует или это каталог", ИсходныйФайл));
			Возврат Неопределено;
			
		КонецЕсли;
		
		ИсходныйФайл = Файл.ПолноеИмя;

	КонецЕсли;
	
	Файл = Новый Файл(ИсходныйФайл);
	КаталогИсходныхФайлов = Файл.Путь;

	НастройкиСтенда = ОбщегоНазначения.ПрочитатьНастройкиСтенда(КаталогИсходныхФайлов, ПараметрыКоманды, Приложение);
	НастройкиАнализаИзменений = ОбщегоНазначения.ПрочитатьНастройкиАнализаИзменений(НастройкиСтенда, КаталогИсходныхФайлов, ПараметрыКоманды, Приложение);
	
	ПарсерКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации();
	
	ОписаниеМодуля = ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПолучитьОписаниеМодуляПоИмениФайла(Файл);

	НастройкиГенератора.Вставить("ОписаниеМодуля", ОписаниеМодуля);
	НастройкиГенератора.Вставить("НастройкиАнализаИзменений", НастройкиАнализаИзменений);
	
	ГенераторДокументации = ОбщегоНазначения.ПолучитьГенераторДокументации(НастройкиСтенда, ПараметрыКоманды, Приложение);
	РезультатГенерации = ГенераторДокументации.Сгенерировать(НастройкиГенератора);
	
	ЕстьОшибкиГенерации = Не ПустаяСтрока(РезультатГенерации.ОшибкиГенерации);
	ТекстОшибки = "";
	
	Если ПараметрыКоманды["-errno"] ИЛИ НЕ ЕстьОшибкиГенерации Тогда

		ОшибкиПубликации = ГенераторДокументации.Опубликовать(РезультатГенерации, НастройкиГенератора);
		Если Не ПустаяСтрока(ОшибкиПубликации) Тогда
			
			ТекстОшибки = СтрШаблон("Публикация документациии завершилась ошибкой: %1", ОшибкиПубликации);
			
		КонецЕсли;

	КонецЕсли;

	Если ЕстьОшибкиГенерации Тогда
		
		ТекстОшибки = СтрШаблон("Генерация документациии завершилась ошибкой: %1", РезультатГенерации.ОшибкиГенерации) + Символы.ПС + ТекстОшибки;
		
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
	
		Приложение.ЗавершитьРаботуПриложенияСОшибкой(ТекстОшибки);
		
	КонецЕсли;
	
	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду
