//////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

Процедура ОписаниеКоманды(КомандаПриложения) Экспорт
	
	КомандаПриложения.Аргумент("PATH", "",
			"Исходный файл, для которого необходимо сгенерировать документацию")
			.Обязательный(Истина);
	
	КомандаПриложения.Опция("format f", "html",
			"Формат генерации документации. Поддерживается только html")
			.ТПеречисление()
			.Перечисление("html", "html", "Документация в формате html");
	
	КомандаПриложения.Опция("config c", "",
			"Путь к конфигурационному файлу. По умолчанию ищет в каталоге с исходным файлом");
	
	КомандаПриложения.Опция("git g", Ложь,
			"Включает режим обработки изменений репозитория git");
	
	КомандаПриложения.Опция("errno e", Ложь,
			"Выполняет генерацию даже при наличии ошибок");
		
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт
	
	НастройкиГенератора = Новый Структура;
	
	ИсходныйФайл = КомандаПриложения.ЗначениеАргумента("PATH");
	Если НЕ ЗначениеЗаполнено(ИсходныйФайл) Тогда
		
		МенеджерПриложения.ПолучитьЛог().Ошибка("Не указан путь к файлу");
		ЗавершитьРаботу(1);
		Возврат;
		
	КонецЕсли;
		
	Файл = Новый Файл(ИсходныйФайл);
	Если Не Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
			
		МенеджерПриложения.ПолучитьЛог().Ошибка("Исходный файл '%1' не существует или это каталог", ИсходныйФайл);
		ЗавершитьРаботу(1);
		Возврат;
			
	КонецЕсли;
		
	ИсходныйФайл = Файл.ПолноеИмя;

	НастройкиСтенда = ОбщегоНазначения.ПрочитатьНастройкиСтенда(Файл.Путь, КомандаПриложения);
	НастройкиАнализаИзменений = ОбщегоНазначения.ПрочитатьНастройкиАнализаИзменений(НастройкиСтенда,
													ИсходныйФайл, КомандаПриложения);

	ПарсерКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации();

	ОписаниеМодуля = ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПолучитьОписаниеМодуляПоИмениФайла(Файл);
	НастройкиГенератора.Вставить("ОписаниеМодуля", ОписаниеМодуля);
	НастройкиГенератора.Вставить("НастройкиАнализаИзменений", НастройкиАнализаИзменений);

	ГенераторДокументации = ОбщегоНазначения.ПолучитьГенераторДокументации(НастройкиСтенда, КомандаПриложения);
	РезультатГенерации = ГенераторДокументации.Сгенерировать(НастройкиГенератора);

	ЕстьОшибкиГенерации = Не ПустаяСтрока(РезультатГенерации.ОшибкиГенерации);
	ТекстОшибки = "";

	Если КомандаПриложения.ЗначениеОпции("errno") ИЛИ НЕ ЕстьОшибкиГенерации Тогда
		
		ОшибкиПубликации = ГенераторДокументации.Опубликовать(РезультатГенерации, НастройкиГенератора);
		Если Не ПустаяСтрока(ОшибкиПубликации) Тогда
			
			ТекстОшибки = СтрШаблон("Публикация документациии завершилась ошибкой: %1", ОшибкиПубликации);
			
		КонецЕсли;
		
	КонецЕсли;

	Если ЕстьОшибкиГенерации Тогда
		
		ТекстОшибки = СтрШаблон("Генерация документациии завершилась ошибкой: %1", РезультатГенерации.ОшибкиГенерации) + Символы.ПС + ТекстОшибки;
		
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		МенеджерПриложения.ПолучитьЛог().Ошибка(ТекстОшибки);
		ЗавершитьРаботу(1);
		
	КонецЕсли;

КонецПроцедуры

// Возвращает имя команды приложения
Функция ИмяКоманды() Экспорт
	
	Возврат "alone";
	
КонецФункции // ИмяКоманды

// Возвращает описание исполняемой команды
Функция КраткоеОписаниеКоманды() Экспорт
	
	Возврат "Выполняет генерацию документации указанного файла";
	
КонецФункции
