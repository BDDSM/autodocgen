//////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

Процедура ОписаниеКоманды(КомандаПриложения) Экспорт

	КомандаПриложения.Аргумент("PATH", "",
						"Каталог исходных файлов конфигурации 1С.
						|При использовании опции -g (--git) нужно передавать каталог репозитория")
						.Обязательный(Истина);

	КомандаПриложения.Опция("config c", "",
						"Путь к конфигурационному файлу. По умолчанию ищет в каталоге исходных файлов");

	КомандаПриложения.Опция("git g", Ложь,
						"Включает режим обработки изменений репозитория git");

	КомандаПриложения.Опция("edt", Ложь,
						"Исходники хранятся в формате EDT");

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт

	ПараметрыКоманды = ПолучитьСтруктуруПараметров(КомандаПриложения);

	ТекстОшибки = "";
	Успешно = ВыполнитьПроверкуИсходников(ПараметрыКоманды, ТекстОшибки);

	Если НЕ Успешно Тогда

		МенеджерПриложения.ПолучитьЛог().Ошибка(ТекстОшибки);
		ЗавершитьРаботу(1);

	КонецЕсли;

КонецПроцедуры

// Возвращает имя команды приложения
Функция ИмяКоманды() Экспорт

	Возврат "check";

КонецФункции // ИмяКоманды

// Возвращает описание исполняемой команды
Функция КраткоеОписаниеКоманды() Экспорт

	Возврат "Выполняет проверку исходных файлов на соответствие требованиям к описаниям";

КонецФункции // ОписаниеКоманды

#Область Служебные

Функция ПолучитьСтруктуруПараметров(Знач КомандаПриложения)

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("КаталогИсходныхФайлов", ОбщегоНазначения.КаталогИсходныхФайлов(КомандаПриложения));
	ПараметрыКоманды.Вставить("ФорматEDT", КомандаПриложения.ЗначениеОпции("edt"));
	ПараметрыКоманды.Вставить("РежимGit", КомандаПриложения.ЗначениеОпции("git"));
	ПараметрыКоманды.Вставить("ФайлНастроек", КомандаПриложения.ЗначениеОпции("config"));

	НастройкиСтенда = ОбщегоНазначения.ПрочитатьНастройкиСтенда(ПараметрыКоманды.КаталогИсходныхФайлов, ПараметрыКоманды.ФайлНастроек);
	НастройкиАнализаИзменений = ОбщегоНазначения.ПрочитатьНастройкиАнализаИзменений(НастройкиСтенда,
		ПараметрыКоманды.КаталогИсходныхФайлов, ПараметрыКоманды.РежимGit);

	ПараметрыКоманды.Вставить("НастройкиСтенда", НастройкиСтенда);
	ПараметрыКоманды.Вставить("НастройкиАнализаИзменений", НастройкиАнализаИзменений);

	Возврат ПараметрыКоманды;

КонецФункции

Функция ВыполнитьПроверкуИсходников(ПараметрыКоманды, ТекстОшибки)

	КаталогИсходныхФайлов 		= ПараметрыКоманды.КаталогИсходныхФайлов;
	НастройкиСтенда 			= ПараметрыКоманды.НастройкиСтенда;
	НастройкиАнализаИзменений 	= ПараметрыКоманды.НастройкиАнализаИзменений;

	Если ПараметрыКоманды.ФорматEDT Тогда
		ТекущийКаталогИсходныхФайлов = ОбъединитьПути(КаталогИсходныхФайлов, "configuration", "src");
	Иначе
		ТекущийКаталогИсходныхФайлов = ОбъединитьПути(КаталогИсходныхФайлов, "src", "configuration");
	КонецЕсли;

	ТекущийКаталогИсходныхФайлов = ОбщегоНазначения.ПолноеИмяФайла(ТекущийКаталогИсходныхФайлов);

	Конфигурация = РазборКонфигураций.ЗагрузитьКонфигурацию(ТекущийКаталогИсходныхФайлов);
	Конфигурация.ЗаполнитьПодсистемыОбъектовКонфигурации();
	Конфигурация.НайтиМодули();
	ОписаниеКонфигурации = Конфигурация.ОписаниеКонфигурации();

	НастройкиГенератора = Новый Структура;

	НастройкиГенератора.Вставить("Парсер", Конфигурация);
	НастройкиГенератора.Вставить("ОписаниеКонфигурации", ОписаниеКонфигурации);
	НастройкиГенератора.Вставить("Модули", ОписаниеКонфигурации.Модули);
	НастройкиГенератора.Вставить("ПодсистемыКонфигурации", ОписаниеКонфигурации.НайтиОбъектыПоТипу("Подсистемы"));
	НастройкиГенератора.Вставить("НастройкиАнализаИзменений", НастройкиАнализаИзменений);

	ГенераторДокументации = Новый ГенераторДокументации(Неопределено);

	ОшибкиГенерации = ГенераторДокументации.ПроверитьИсходники(НастройкиГенератора);

	Если НЕ ПустаяСтрока(ОшибкиГенерации) Тогда
		ТекстОшибки = "Генерация документации завершилась ошибкой: " + ОшибкиГенерации;
	КонецЕсли;

	Возврат ПустаяСтрока(ТекстОшибки);

КонецФункции

#КонецОбласти
