//////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

Процедура ОписаниеКоманды(КомандаПриложения) Экспорт
	
	КомандаПриложения.Аргумент("PATH", "", 
						"Каталог исходных файлов конфигурации 1С. 
						|При использовании опции -g (--git) нужно передавать каталог репозитория")
						.Обязательный(Истина);

	КомандаПриложения.Опция("format f", "confluence",	
						"Формат генерации документации. Поддерживается confluence и html")
						.ТПеречисление()
						.Перечисление("confluence", "confluence", "Документация в формате confluence")
						.Перечисление("html", "html", "Документация в формате html");

	КомандаПриложения.Опция("config c", "",
						"Путь к конфигурационному файлу. По умолчанию ищет в каталоге исходных файлов");

	КомандаПриложения.Опция("git g", Ложь,
						"Включает режим обработки изменений репозитория git");

	КомандаПриложения.Опция("errno e", Ложь,
						"Выполняет генерацию даже при наличии ошибок");

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт
	
	НастройкиГенератора = Новый Структура;

	КаталогИсходныхФайлов = ОбщегоНазначения.КаталогИсходныхФайлов(КомандаПриложения);
	НастройкиСтенда = ОбщегоНазначения.ПрочитатьНастройкиСтенда(КаталогИсходныхФайлов, КомандаПриложения);
	НастройкиАнализаИзменений = ОбщегоНазначения.ПрочитатьНастройкиАнализаИзменений(НастройкиСтенда, 
													КаталогИсходныхФайлов, КомандаПриложения);

	ПарсерКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации();
	ТекущийКаталогИсходныхФайлов = ОбъединитьПути(КаталогИсходныхФайлов, "src", "configuration");
	Файл = Новый Файл(ТекущийКаталогИсходныхФайлов);
	ТекущийКаталогИсходныхФайлов = Файл.ПолноеИмя;
	ОписаниеКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации)
											.ПрочитатьДеревоКонфигурации(ТекущийКаталогИсходныхФайлов);
	ОписаниеКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации)
											.ПрочитатьМодулиКонфигурации(ТекущийКаталогИсходныхФайлов, ОписаниеКонфигурации);

	НастройкиГенератора.Вставить("ОписаниеКонфигурации", ОписаниеКонфигурации);
	НастройкиГенератора.Вставить("ПодсистемыКонфигурации", ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации)
																.ПрочитатьПодсистемыКонфигурации(ТекущийКаталогИсходныхФайлов));
	НастройкиГенератора.Вставить("ОписаниеКонстант", ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации)
															.ПрочитатьОписаниеКонстант(ТекущийКаталогИсходныхФайлов, ОписаниеКонфигурации)); 
	НастройкиГенератора.Вставить("НастройкиАнализаИзменений", НастройкиАнализаИзменений);

	ГенераторДокументации = ОбщегоНазначения.ПолучитьГенераторДокументации(НастройкиСтенда, КомандаПриложения);
	РезультатГенерации = ГенераторДокументации.Сгенерировать(НастройкиГенератора);

	ЕстьОшибкиГенерации = Не ПустаяСтрока(РезультатГенерации.ОшибкиГенерации);
	ТекстОшибки = "";

	Если КомандаПриложения.ЗначениеОпции("errno") ИЛИ НЕ ЕстьОшибкиГенерации Тогда

		ОшибкиПубликации = ГенераторДокументации.Опубликовать(РезультатГенерации, НастройкиГенератора);
		Если Не ПустаяСтрока(ОшибкиПубликации) Тогда

			ТекстОшибки = СтрШаблон("Публикация документациии завершилась ошибкой: %1", ОшибкиПубликации);

		КонецЕсли;

	КонецЕсли;

	Если ЕстьОшибкиГенерации Тогда

		ТекстОшибки = СтрШаблон("Генерация документациии завершилась ошибкой: %1", РезультатГенерации.ОшибкиГенерации) + Символы.ПС + ТекстОшибки;

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		МенеджерПриложения.ПолучитьЛог().Ошибка(ТекстОшибки);
		ЗавершитьРаботу(1);

	КонецЕсли;

КонецПроцедуры

// Возвращает имя команды приложения
Функция ИмяКоманды() Экспорт
	
	Возврат "generate";
	
КонецФункции // ИмяКоманды

// Возвращает описание исполняемой команды
Функция КраткоеОписаниеКоманды() Экспорт
	
	Возврат "Выполняет генерацию документации на основании исходных файлов";
	
КонецФункции // ОписаниеКоманды
