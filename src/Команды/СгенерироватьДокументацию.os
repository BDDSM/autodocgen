//////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды
//
///////////////////////////////////////////////////////////////////////////////

// Возвращает имя команды приложения
Функция ИмяКоманды() Экспорт
	
	Возврат "generate";
	
КонецФункции // ИмяКоманды

// Возвращает описание исполняемой команды
Функция ОписаниеКоманды() Экспорт
	
	Возврат "Выполняет генерацию документации на основании исходных файлов";
	
КонецФункции // ОписаниеКоманды

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт

	// Добавление параметров команды
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогИсходныхФайлов", "Каталог исходных файлов конфигурации 1С. При режиме -git стоит передавать каталог репозитория");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-format", "Формат генерации документации. Поддерживается confluence и html. Используется confluence по умолчанию");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-config", "Путь к конфигурационному файлу. По умолчанию ищет в каталоге исходных файлов");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-git", "Включает режим обработки изменений репозитория git");
	
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	НастройкиГенератора = Новый Структура;
	
	КаталогИсходныхФайлов = ОбщегоНазначения.КаталогИсходныхФайлов(ПараметрыКоманды, Приложение);
	НастройкиСтенда = ОбщегоНазначения.ПрочитатьНастройкиСтенда(КаталогИсходныхФайлов, ПараметрыКоманды, Приложение);
	НастройкиАнализаИзменений = ОбщегоНазначения.ПрочитатьНастройкиАнализаИзменений(НастройкиСтенда, КаталогИсходныхФайлов, ПараметрыКоманды, Приложение);
	
	ПарсерКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации();
	
	ТекущийКаталогИсходныхФайлов = ?(НастройкиАнализаИзменений.Анализировать, НастройкиАнализаИзменений.КаталогИсходныхФайлов, КаталогИсходныхФайлов);
	
	ОписаниеКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПрочитатьДеревоКонфигурации(ТекущийКаталогИсходныхФайлов);
	ОписаниеКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПрочитатьМодулиКонфигурации(ТекущийКаталогИсходныхФайлов, ОписаниеКонфигурации);

	НастройкиГенератора.Вставить("ОписаниеКонфигурации", ОписаниеКонфигурации);
	НастройкиГенератора.Вставить("ПодсистемыКонфигурации", ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПрочитатьПодсистемыКонфигурации(ТекущийКаталогИсходныхФайлов));
	НастройкиГенератора.Вставить("ОписаниеКонстант", ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПрочитатьОписаниеКонстант(ТекущийКаталогИсходныхФайлов, ОписаниеКонфигурации)); 
	НастройкиГенератора.Вставить("НастройкиАнализаИзменений", НастройкиАнализаИзменений);

	ГенераторДокументации = ОбщегоНазначения.ПолучитьГенераторДокументации(НастройкиСтенда, ПараметрыКоманды, Приложение);
	РезультатГенерации = ГенераторДокументации.Сгенерировать(НастройкиГенератора);
	
	Если Не ПустаяСтрока(РезультатГенерации.ОшибкиГенерации) Тогда
		
		ТекстОшибки = СтрШаблон("Генерация документациии завершилась ошибкой: %1", РезультатГенерации.ОшибкиГенерации);
		Приложение.ЗавершитьРаботуПриложенияСОшибкой(ТекстОшибки);
		Возврат Приложение.РезультатыКоманд().ОшибкаВремениВыполнения;
		
	КонецЕсли;
	
	ОшибкиПубликации = ГенераторДокументации.Опубликовать(РезультатГенерации, НастройкиГенератора);
	Если Не ПустаяСтрока(ОшибкиПубликации) Тогда
		
		ТекстОшибки = СтрШаблон("Публикация документациии завершилась ошибкой: %1", ОшибкиПубликации);
		Приложение.ЗавершитьРаботуПриложенияСОшибкой(ТекстОшибки);
		Возврат Приложение.РезультатыКоманд().ОшибкаВремениВыполнения;
		
	КонецЕсли;

	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду
