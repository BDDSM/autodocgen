///////////////////////////////////////////////////////////////////////////////
//
// Тестирование основной функциональности пакета
// Проверка на соответствие выгрузки эталону
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

#Использовать "..\src"
#Использовать logos
#Использовать asserts
#Использовать fs

///////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт

	Лог = Логирование.ПолучитьЛог("Тест");

	МассивТестов = Новый Массив;
	МассивТестов.Добавить("ТестСформироватьДокументациюОбщегоМодуляJSON");
	МассивТестов.Добавить("ТестСформироватьДокументациюОбщегоМодуляHTML");
	МассивТестов.Добавить("ТестСформироватьДокументациюОбщегоМодуляMarkDown");

	Возврат МассивТестов;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Форматы = Новый Массив();
	Форматы.Добавить("JSON");
	Форматы.Добавить("HTML");
	Форматы.Добавить("Markdown");

	Для Каждого Формат Из Форматы Цикл
		
		КаталогДокументации = ОбъединитьПути(ТекущийКаталог(), СтрШаблон("%1_autodoc", Формат));
		
		Если (Новый Файл(КаталогДокументации)).Существует() Тогда
			
			УдалитьФайлы(КаталогДокументации);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ТестСформироватьДокументациюОбщегоМодуляJSON() Экспорт
	
	ФайлМодуля = ОбъединитьПути(ОбъединитьПути(КаталогФикстур(), "configuration", "CommonModules"), "TestModule", "Module.bsl");
	
	ИмяСформированногоФайла = СформироватьДокументациюМодуля(ФайлМодуля, "JSON");

	Чтение = Новый ЧтениеJSON();
	Чтение.ОткрытьФайл(ИмяСформированногоФайла);
	ПрочитатьJSON(Чтение);
	Чтение.Закрыть();

КонецПроцедуры

Процедура ТестСформироватьДокументациюОбщегоМодуляHTML() Экспорт
	
	ФайлМодуля = ОбъединитьПути(ОбъединитьПути(КаталогФикстур(), "configuration", "CommonModules"), "TestModule", "Module.bsl");
	
	СформироватьДокументациюМодуля(ФайлМодуля, "HTML");

КонецПроцедуры

Процедура ТестСформироватьДокументациюОбщегоМодуляMarkDown() Экспорт
	
	ФайлМодуля = ОбъединитьПути(ОбъединитьПути(КаталогФикстур(), "configuration", "CommonModules"), "TestModule", "Module.bsl");
	
	СформироватьДокументациюМодуля(ФайлМодуля, "MarkDown");

КонецПроцедуры

Функция СформироватьДокументациюМодуля(ИмяФайла, Формат)

	ФайлНастроек = ОбъединитьПути(КаталогФикстур(), "config.json");

	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ИсходныйФайл", ИмяФайла);
	ПараметрыКоманды.Вставить("Формат", Формат);
	ПараметрыКоманды.Вставить("ФорматEDT", Истина);
	ПараметрыКоманды.Вставить("РежимGit", Ложь);
	ПараметрыКоманды.Вставить("ГенерацияПриНаличииОшибок", Ложь);
	ПараметрыКоманды.Вставить("ФайлНастроек", ФайлНастроек);
	
	КаталогДокументации = ОбъединитьПути(ТекущийКаталог(), СтрШаблон("%1_autodoc", ПараметрыКоманды.Формат));
	СоздатьКаталог(КаталогДокументации);

	ТекстОшибки = "";
	
	Команда = Новый СгенерироватьДокументациюПоФайлу();
	Успех = Команда.ВыполнитьГенерациюДокументации(ПараметрыКоманды, ТекстОшибки);
	
	ИмяСформированногоФайла = ОбъединитьПути(КаталогДокументации, "autodoc", "Модуль." + Формат);
	Ожидаем.Что(Успех, "Не удалось сформировать документацию по модулю. " + ТекстОшибки).ЭтоИстина();
	Ожидаем.Что((Новый Файл(ИмяСформированногоФайла)).Существует(), "Не найден сформированный файл").ЭтоИстина();
	
	Возврат ИмяСформированногоФайла;

КонецФункции

Функция КаталогФикстур()
	
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures");

КонецФункции

ПередЗапускомТеста();
ТестСформироватьДокументациюОбщегоМодуляHTML();
ПослеЗапускаТеста();